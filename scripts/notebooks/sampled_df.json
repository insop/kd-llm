[{"instruction":"What is the best way to sort an array of integers in descending order?","input":"","output":"def sortDescending(arr):\n    arr.sort(reverse=True)\n    return arr","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the best way to sort an array of integers in descending order?\n\n### Input:\n\n\n### Response:\ndef sortDescending(arr):\n    arr.sort(reverse=True)\n    return arr"},{"instruction":"Create a MySQL database to store information about products and their prices, including an auto-incrementing primary key","input":"Not applicable","output":"CREATE TABLE `products` \n (\n  `id` INT NOT NULL AUTO_INCREMENT, \n  `name` VARCHAR(255) NOT NULL, \n  `price` DECIMAL(10,2) NOT NULL, \n  PRIMARY KEY (`id`)\n  );","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a MySQL database to store information about products and their prices, including an auto-incrementing primary key\n\n### Input:\nNot applicable\n\n### Response:\nCREATE TABLE `products` \n (\n  `id` INT NOT NULL AUTO_INCREMENT, \n  `name` VARCHAR(255) NOT NULL, \n  `price` DECIMAL(10,2) NOT NULL, \n  PRIMARY KEY (`id`)\n  );"},{"instruction":"Provide a C program that takes a single character and determines whether it is a vowel or not.","input":"'a'","output":"#include <stdio.h>\n \nint main(){\n    char ch;\n \n    printf(\"Input a character: \");\n    scanf(\"%c\", &ch);\n \n    if (ch == 'a' || ch == 'A' || ch == 'e' || ch == 'E' || ch == 'i' || ch == 'I'\n        || ch =='o' || ch =='O' || ch == 'u' || ch == 'U')\n        printf(\"%c is a vowel.\\n\", ch);\n    else\n        printf(\"%c is not a vowel.\\n\", ch);\n \n    return 0;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a C program that takes a single character and determines whether it is a vowel or not.\n\n### Input:\n'a'\n\n### Response:\n#include <stdio.h>\n \nint main(){\n    char ch;\n \n    printf(\"Input a character: \");\n    scanf(\"%c\", &ch);\n \n    if (ch == 'a' || ch == 'A' || ch == 'e' || ch == 'E' || ch == 'i' || ch == 'I'\n        || ch =='o' || ch =='O' || ch == 'u' || ch == 'U')\n        printf(\"%c is a vowel.\\n\", ch);\n    else\n        printf(\"%c is not a vowel.\\n\", ch);\n \n    return 0;\n}"},{"instruction":"Calculate the sum of the digits in a given integer.","input":"123","output":"def sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n \/\/= 10\n    return s\n\nsum_digits(123)  # 6","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the sum of the digits in a given integer.\n\n### Input:\n123\n\n### Response:\ndef sum_digits(n):\n    s = 0\n    while n:\n        s += n % 10\n        n \/\/= 10\n    return s\n\nsum_digits(123)  # 6"},{"instruction":"Generate a random password consisting of uppercase, lowercase, and numeric characters, at least 8 characters in length.","input":"Not applicable","output":"R7w@77!L","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password consisting of uppercase, lowercase, and numeric characters, at least 8 characters in length.\n\n### Input:\nNot applicable\n\n### Response:\nR7w@77!L"},{"instruction":"Come up with a way to find the intersection of two sets.","input":"","output":"def intersection(set1, set2):\n    return [x for x in set1 if x in set2]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a way to find the intersection of two sets.\n\n### Input:\n\n\n### Response:\ndef intersection(set1, set2):\n    return [x for x in set1 if x in set2]"},{"instruction":"Find all the prime numbers between 500 and 600.","input":"","output":"primes = []\nfor num in range(500, 600):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           primes.append(num)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all the prime numbers between 500 and 600.\n\n### Input:\n\n\n### Response:\nprimes = []\nfor num in range(500, 600):\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:\n           primes.append(num)"},{"instruction":"Create a basic C++ program that stores 5 integers in an array, and prints out the sum of the integers.","input":"[1, 2, 3, 4, 5]","output":"#include <iostream>\nusing namespace std;\n\nint main() {\n int arr[] = {1, 2, 3, 4, 5};\n int sum = 0;\n \n for (int i=0;i<5;i++) {\n sum = sum + arr[i];\n }\n \n cout<<sum;\n return 0;\n}\n \/\/ Output: 15","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic C++ program that stores 5 integers in an array, and prints out the sum of the integers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Response:\n#include <iostream>\nusing namespace std;\n\nint main() {\n int arr[] = {1, 2, 3, 4, 5};\n int sum = 0;\n \n for (int i=0;i<5;i++) {\n sum = sum + arr[i];\n }\n \n cout<<sum;\n return 0;\n}\n \/\/ Output: 15"},{"instruction":"Write an HTML page with a table that shows the name, age, and occupation of three people.","input":"Susan (48, Chef), John (34, Lawyer), Mary (27, Teacher)","output":"<html>\n<head>\n<\/head>\n<body>\n <h1>People Information<\/h1>\n <table>\n  <tr>\n   <th>Name<\/th>\n   <th>Age<\/th>\n   <th>Occupation<\/th>\n  <\/tr>\n  <tr>\n   <td>Susan<\/td>\n   <td>48<\/td>\n   <td>Chef<\/td>\n  <\/tr>\n  <tr>\n   <td>John<\/td>\n   <td>34<\/td>\n   <td>Lawyer<\/td>\n  <\/tr>\n  <tr>\n   <td>Mary<\/td>\n   <td>27<\/td>\n   <td>Teacher<\/td>\n  <\/tr>\n <\/table>\n<\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an HTML page with a table that shows the name, age, and occupation of three people.\n\n### Input:\nSusan (48, Chef), John (34, Lawyer), Mary (27, Teacher)\n\n### Response:\n<html>\n<head>\n<\/head>\n<body>\n <h1>People Information<\/h1>\n <table>\n  <tr>\n   <th>Name<\/th>\n   <th>Age<\/th>\n   <th>Occupation<\/th>\n  <\/tr>\n  <tr>\n   <td>Susan<\/td>\n   <td>48<\/td>\n   <td>Chef<\/td>\n  <\/tr>\n  <tr>\n   <td>John<\/td>\n   <td>34<\/td>\n   <td>Lawyer<\/td>\n  <\/tr>\n  <tr>\n   <td>Mary<\/td>\n   <td>27<\/td>\n   <td>Teacher<\/td>\n  <\/tr>\n <\/table>\n<\/body>\n<\/html>"},{"instruction":"Develop a code in Java that takes two integer arrays and checks if they are equal in size and content.","input":"array1 = [1, 2, 3, 4, 5]\narray2 = [1, 2, 3, 5, 4]","output":"import java.util.Arrays;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        \n        int[] array1 = {1, 2, 3, 4, 5};\n        int[] array2 = {1, 2, 3, 5, 4};\n        \n        if (array1.length == array2.length) {\n            boolean equalFlag = true;\n            for (int i=0; i<array1.length; i++) {\n                if (array1[i] != array2[i]) {\n                    equalFlag = false;\n                    break;\n                }\n            }\n            if (equalFlag) {\n                System.out.println(\"Arrays are equal.\");\n            } else {\n                System.out.println(\"Arrays are not equal\");\n            }\n        } else {\n            System.out.println(\"Arrays are not equal\");\n        }\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code in Java that takes two integer arrays and checks if they are equal in size and content.\n\n### Input:\narray1 = [1, 2, 3, 4, 5]\narray2 = [1, 2, 3, 5, 4]\n\n### Response:\nimport java.util.Arrays;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        \n        int[] array1 = {1, 2, 3, 4, 5};\n        int[] array2 = {1, 2, 3, 5, 4};\n        \n        if (array1.length == array2.length) {\n            boolean equalFlag = true;\n            for (int i=0; i<array1.length; i++) {\n                if (array1[i] != array2[i]) {\n                    equalFlag = false;\n                    break;\n                }\n            }\n            if (equalFlag) {\n                System.out.println(\"Arrays are equal.\");\n            } else {\n                System.out.println(\"Arrays are not equal\");\n            }\n        } else {\n            System.out.println(\"Arrays are not equal\");\n        }\n    }\n}"},{"instruction":"Use a sorting algorithm to sort the numbers in an array in ascending order.","input":"[3, 1, 5, 4, 2]","output":"def bubble_sort(arr):\n    is_sorted = False\n    while not is_sorted:\n        is_sorted = True\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                is_sorted = False\n    return arr\n\nprint(bubble_sort([3, 1, 5, 4, 2]))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a sorting algorithm to sort the numbers in an array in ascending order.\n\n### Input:\n[3, 1, 5, 4, 2]\n\n### Response:\ndef bubble_sort(arr):\n    is_sorted = False\n    while not is_sorted:\n        is_sorted = True\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                is_sorted = False\n    return arr\n\nprint(bubble_sort([3, 1, 5, 4, 2]))"},{"instruction":"write a python code to print the common elements in between two given sets.","input":"set1 = {1, 2, 3, 4, 5, 6, 7}\nset2 = {2, 4, 5, 6}","output":"def common_elements(set1, set2): \n    return set1 & set2\n\nprint(common_elements({1,2,3,4,5,6,7}, {2,4,5,6}))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nwrite a python code to print the common elements in between two given sets.\n\n### Input:\nset1 = {1, 2, 3, 4, 5, 6, 7}\nset2 = {2, 4, 5, 6}\n\n### Response:\ndef common_elements(set1, set2): \n    return set1 & set2\n\nprint(common_elements({1,2,3,4,5,6,7}, {2,4,5,6}))"},{"instruction":"Create a basic website that uses responsive web design principles.","input":"Not applicable","output":"<!DOCTYPE html>\n<html>\n<head>\n\t<title>Responsive Website Design<\/title>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<style>\n\t\t\/* Styles go here *\/\n\t\tbody {\n\t\t\tmargin: 0;\n\t\t\tfont-family: sans-serif;\n\t\t}\n\n\t\t.container {\n\t\t\tmax-width: 960px;\n\t\t\tmargin: 0 auto;\n\t\t\tpadding: 0 10px;\n\t\t}\n\n\t\t\/* Larger devices *\/\n\t\t@media only screen and (min-width: 768px) {\n\t\t\t\/* More Styles go here *\/\n\t\t\t.container {\n\t\t\t\tpadding: 0 20px;\n\t\t\t}\n\t\t}\n\t<\/style>\n<\/head>\n<body>\n\t<div class=\"container\">\n\t\t<!-- Content here -->\n\t\t<h1>Hello World!<\/h1>\n\t<\/div>\n<\/body>\n<\/html>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic website that uses responsive web design principles.\n\n### Input:\nNot applicable\n\n### Response:\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>Responsive Website Design<\/title>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<style>\n\t\t\/* Styles go here *\/\n\t\tbody {\n\t\t\tmargin: 0;\n\t\t\tfont-family: sans-serif;\n\t\t}\n\n\t\t.container {\n\t\t\tmax-width: 960px;\n\t\t\tmargin: 0 auto;\n\t\t\tpadding: 0 10px;\n\t\t}\n\n\t\t\/* Larger devices *\/\n\t\t@media only screen and (min-width: 768px) {\n\t\t\t\/* More Styles go here *\/\n\t\t\t.container {\n\t\t\t\tpadding: 0 20px;\n\t\t\t}\n\t\t}\n\t<\/style>\n<\/head>\n<body>\n\t<div class=\"container\">\n\t\t<!-- Content here -->\n\t\t<h1>Hello World!<\/h1>\n\t<\/div>\n<\/body>\n<\/html>"},{"instruction":"Write a code in C++ to delete an element from an array in a given index.","input":"Array = [5, 2, 8, 4, 9];\nIndex = 2;","output":"\/\/ Function to delete an element \nvoid deleteAtIndex(int arr[], int n, int index) \n{ \n    \/\/ Shift all the elements after the  \n    \/\/ element at given index one place behind \n    for (int i = index; i < n - 1; i++) \n        arr[i] = arr[i + 1]; \n  \n    \/\/ Decrease size after removing element \n    n--; \n  \n    \/\/ Print the array after deleting \n    for (int i = 0; i < n; i++) \n        cout << arr[i] << \" \"; \n} \n  \n\/\/ Driver Code \nint main() \n{ \n    int arr[] = {5, 2, 8, 4, 9}; \n    int n = sizeof(arr) \/ sizeof(arr[0]); \n    int index = 2; \n  \n    deleteAtIndex(arr, n, index); \n  \n    return 0; \n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in C++ to delete an element from an array in a given index.\n\n### Input:\nArray = [5, 2, 8, 4, 9];\nIndex = 2;\n\n### Response:\n\/\/ Function to delete an element \nvoid deleteAtIndex(int arr[], int n, int index) \n{ \n    \/\/ Shift all the elements after the  \n    \/\/ element at given index one place behind \n    for (int i = index; i < n - 1; i++) \n        arr[i] = arr[i + 1]; \n  \n    \/\/ Decrease size after removing element \n    n--; \n  \n    \/\/ Print the array after deleting \n    for (int i = 0; i < n; i++) \n        cout << arr[i] << \" \"; \n} \n  \n\/\/ Driver Code \nint main() \n{ \n    int arr[] = {5, 2, 8, 4, 9}; \n    int n = sizeof(arr) \/ sizeof(arr[0]); \n    int index = 2; \n  \n    deleteAtIndex(arr, n, index); \n  \n    return 0; \n}"},{"instruction":"Write a JavaScript program to extract the day and month from a given date string.","input":"date = '1\/5\/2020'","output":"const dateArr = date.split('\/');\nconst day = dateArr[1];\nconst month = dateArr[0];\n\nconsole.log('Day:', day);\nconsole.log('Month:', month);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a JavaScript program to extract the day and month from a given date string.\n\n### Input:\ndate = '1\/5\/2020'\n\n### Response:\nconst dateArr = date.split('\/');\nconst day = dateArr[1];\nconst month = dateArr[0];\n\nconsole.log('Day:', day);\nconsole.log('Month:', month);"},{"instruction":"Find the most frequent words from a given sentence.","input":"'The quick brown fox jumps over the lazy dog'","output":"def find_most_frequent_words(sentence):\n    words = sentence.split()\n    word_occurrences = {}\n\n    for word in words:\n        if word in word_occurrences:\n            word_occurrences[word] += 1\n        else:\n            word_occurrences[word] = 1\n\n    most_frequent_words = []\n    highest_occurrences = 0\n    for word, occurrences in word_occurrences.items():\n        if occurrences > highest_occurrences:\n            most_frequent_words = [word]\n            highest_occurrences = occurrences\n        elif occurrences == highest_occurrences:\n            most_frequent_words.append(word)\n\n    return most_frequent_words\n\nsentence = 'The quick brown fox jumps over the lazy dog'\n\nmost_frequent_words = find_most_frequent_words(sentence)\nprint(most_frequent_words)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most frequent words from a given sentence.\n\n### Input:\n'The quick brown fox jumps over the lazy dog'\n\n### Response:\ndef find_most_frequent_words(sentence):\n    words = sentence.split()\n    word_occurrences = {}\n\n    for word in words:\n        if word in word_occurrences:\n            word_occurrences[word] += 1\n        else:\n            word_occurrences[word] = 1\n\n    most_frequent_words = []\n    highest_occurrences = 0\n    for word, occurrences in word_occurrences.items():\n        if occurrences > highest_occurrences:\n            most_frequent_words = [word]\n            highest_occurrences = occurrences\n        elif occurrences == highest_occurrences:\n            most_frequent_words.append(word)\n\n    return most_frequent_words\n\nsentence = 'The quick brown fox jumps over the lazy dog'\n\nmost_frequent_words = find_most_frequent_words(sentence)\nprint(most_frequent_words)"},{"instruction":"Build a Python program that sorts a list of numbers from highest to lowest.","input":"[28, 5, 17, 10, 43]","output":"def sort_numbers(numbers):\n    numbers.sort(reverse=True)\n    return numbers\n\nnumbers = [28, 5, 17, 10, 43]\n\nsorted_numbers = sort_numbers(numbers)\nprint(sorted_numbers)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program that sorts a list of numbers from highest to lowest.\n\n### Input:\n[28, 5, 17, 10, 43]\n\n### Response:\ndef sort_numbers(numbers):\n    numbers.sort(reverse=True)\n    return numbers\n\nnumbers = [28, 5, 17, 10, 43]\n\nsorted_numbers = sort_numbers(numbers)\nprint(sorted_numbers)"},{"instruction":"Write a Java program to remove duplicate elements from an array.","input":"","output":"public static int[] removeDuplicates(int[] arr){\n    HashSet<Integer> hashset = new HashSet<>();\n    for(int i : arr){\n        hashset.add(i);\n    }\n\n    int[] result = new int[hashset.size()];\n    int index = 0;\n    for(Integer value : hashset){\n        result[index++] = value;\n    }\n\n    return result;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Java program to remove duplicate elements from an array.\n\n### Input:\n\n\n### Response:\npublic static int[] removeDuplicates(int[] arr){\n    HashSet<Integer> hashset = new HashSet<>();\n    for(int i : arr){\n        hashset.add(i);\n    }\n\n    int[] result = new int[hashset.size()];\n    int index = 0;\n    for(Integer value : hashset){\n        result[index++] = value;\n    }\n\n    return result;\n}"},{"instruction":"Write a Python program to insert a given string at the beginning of all items in a list.","input":"List: ['Red', 'Green', 'Black']\nString: 'White'","output":"def add_string_beginning(list_string, add_string):\n    new_list = [add_string + str(item) for item in list(list_string)]\n    return  new_list\n\nlist_string = ['Red', 'Green', 'Black']\nadd_string = 'White'\n\nprint(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to insert a given string at the beginning of all items in a list.\n\n### Input:\nList: ['Red', 'Green', 'Black']\nString: 'White'\n\n### Response:\ndef add_string_beginning(list_string, add_string):\n    new_list = [add_string + str(item) for item in list(list_string)]\n    return  new_list\n\nlist_string = ['Red', 'Green', 'Black']\nadd_string = 'White'\n\nprint(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']"},{"instruction":"Create a function to find the maximum sum of consecutive elements from a given list.","input":"list = [1, 2, 3, 0, -2, 4, 1]","output":"def find_max_sum(arr):\n    curr_max_sum = 0\n    max_sum = 0\n\n    for num in arr:\n        curr_max_sum = max(num, curr_max_sum + num)\n        max_sum = max(curr_max_sum, max_sum)\n\n    return max_sum","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to find the maximum sum of consecutive elements from a given list.\n\n### Input:\nlist = [1, 2, 3, 0, -2, 4, 1]\n\n### Response:\ndef find_max_sum(arr):\n    curr_max_sum = 0\n    max_sum = 0\n\n    for num in arr:\n        curr_max_sum = max(num, curr_max_sum + num)\n        max_sum = max(curr_max_sum, max_sum)\n\n    return max_sum"},{"instruction":"Create a Java method to calculate the maximum difference between two elements in a given array.","input":"[4, 5, 6, 7, 8]","output":"public static int maxDifference(int[] arr) {\n    int max = 0;\n    for (int i = 0; i < arr.length; i++){\n        for (int j = i + 1; j < arr.length; j++){\n            int diff = arr[j] - arr[i];\n            if (diff > max)\n                max = diff;\n        }\n    }\n    return max;\n}\n\nint result = maxDifference(new int[] {4, 5, 6, 7, 8});\nSystem.out.println(result);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Java method to calculate the maximum difference between two elements in a given array.\n\n### Input:\n[4, 5, 6, 7, 8]\n\n### Response:\npublic static int maxDifference(int[] arr) {\n    int max = 0;\n    for (int i = 0; i < arr.length; i++){\n        for (int j = i + 1; j < arr.length; j++){\n            int diff = arr[j] - arr[i];\n            if (diff > max)\n                max = diff;\n        }\n    }\n    return max;\n}\n\nint result = maxDifference(new int[] {4, 5, 6, 7, 8});\nSystem.out.println(result);"},{"instruction":"Generate an XOR gate for two binary inputs A and B.","input":"","output":"def xor_gate(a, b):\n    \"\"\"Generates an XOR gate for two binary inputs A and B.\"\"\"\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0 and b == 1:\n        return 1\n    elif a == 1 and b == 0:\n        return 1\n    elif a == 1 and b == 1:\n        return 0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an XOR gate for two binary inputs A and B.\n\n### Input:\n\n\n### Response:\ndef xor_gate(a, b):\n    \"\"\"Generates an XOR gate for two binary inputs A and B.\"\"\"\n    if a == 0 and b == 0:\n        return 0\n    elif a == 0 and b == 1:\n        return 1\n    elif a == 1 and b == 0:\n        return 1\n    elif a == 1 and b == 1:\n        return 0"},{"instruction":"Write a code that takes two arguments, a string, and another argument containing two indices, and prints the substring between the indices.","input":"string = \"Hello World!\", index = [3, 7]","output":"def substring(string, indices):\n    print(string[indices[0]: indices[1] + 1])\nsubstring(\"Hello World!\", [3, 7])","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that takes two arguments, a string, and another argument containing two indices, and prints the substring between the indices.\n\n### Input:\nstring = \"Hello World!\", index = [3, 7]\n\n### Response:\ndef substring(string, indices):\n    print(string[indices[0]: indices[1] + 1])\nsubstring(\"Hello World!\", [3, 7])"},{"instruction":"Create a Node.js application to make a console call with the provided data as an argument.","input":"data = {name: 'James', age: 20};","output":"const data = { name: 'James', age: 20 };\n\nconst info = JSON.stringify(data);\n\nconsole.log(info);\n\n\/\/ Output:\n\/\/ {\"name\":\"James\",\"age\":20}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Node.js application to make a console call with the provided data as an argument.\n\n### Input:\ndata = {name: 'James', age: 20};\n\n### Response:\nconst data = { name: 'James', age: 20 };\n\nconst info = JSON.stringify(data);\n\nconsole.log(info);\n\n\/\/ Output:\n\/\/ {\"name\":\"James\",\"age\":20}"},{"instruction":"Create a background job in Python to run every 5 minutes.","input":"","output":"# Importing the necessary module\nimport schedule\n\n# Defining the job\ndef job():\n    print(\"Job executed!\")\n\n# Scheduling the job to run every 5 minutes\nschedule.every(5).minutes.do(job)\n\n# Running the job\nwhile True:\n    schedule.run_pending()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a background job in Python to run every 5 minutes.\n\n### Input:\n\n\n### Response:\n# Importing the necessary module\nimport schedule\n\n# Defining the job\ndef job():\n    print(\"Job executed!\")\n\n# Scheduling the job to run every 5 minutes\nschedule.every(5).minutes.do(job)\n\n# Running the job\nwhile True:\n    schedule.run_pending()"},{"instruction":"Create a basic Python script for a calculator that takes user input and performs a calculation based on the input.","input":"Not applicable","output":"def calculator():\n    operator = input(\"Please enter an operator: \")\n    num1 = float(input(\"Please enter your first number: \"))\n    num2 = float(input(\"Please enter your second number: \"))\n\n    if operator == \"+\":\n        print(num1 + num2)\n    elif operator == \"-\":\n        print(num1 - num2)\n    elif operator == \"*\":\n        print(num1 * num2)\n    elif operator == \"\/\":\n        print(num1 \/ num2)\n    else:\n        print(\"Invalid operator\")\n\ncalculator()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script for a calculator that takes user input and performs a calculation based on the input.\n\n### Input:\nNot applicable\n\n### Response:\ndef calculator():\n    operator = input(\"Please enter an operator: \")\n    num1 = float(input(\"Please enter your first number: \"))\n    num2 = float(input(\"Please enter your second number: \"))\n\n    if operator == \"+\":\n        print(num1 + num2)\n    elif operator == \"-\":\n        print(num1 - num2)\n    elif operator == \"*\":\n        print(num1 * num2)\n    elif operator == \"\/\":\n        print(num1 \/ num2)\n    else:\n        print(\"Invalid operator\")\n\ncalculator()"},{"instruction":"Create a program to sort the elements of a given array in ascending order by using a bubble sort algorithm.","input":"[4,1,8,2,9,7,6,3]","output":"# Bubble Sort Algorithm\ndef bubble_sort(arr): \n\u00a0\u00a0# Swap the elements to arrange in order \n\u00a0\u00a0for i in range(len(arr)): \n\u00a0\u00a0for j in range(0, len(arr) - i - 1): \n\u00a0\u00a0\u00a0if arr[j] > arr[j + 1]: \n\u00a0\u00a0\u00a0\u00a0arr[j], arr[j + 1] = arr[j + 1], arr[j]  \n\n# Input array \narr = [4,1,8,2,9,7,6,3] \n\n# Print the sorted array \nbubble_sort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n\u00a0\u00a0print (\"%d\" % arr[i]), \n# Output : 1 2 3 4 6 7 8 9","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to sort the elements of a given array in ascending order by using a bubble sort algorithm.\n\n### Input:\n[4,1,8,2,9,7,6,3]\n\n### Response:\n# Bubble Sort Algorithm\ndef bubble_sort(arr): \n\u00a0\u00a0# Swap the elements to arrange in order \n\u00a0\u00a0for i in range(len(arr)): \n\u00a0\u00a0for j in range(0, len(arr) - i - 1): \n\u00a0\u00a0\u00a0if arr[j] > arr[j + 1]: \n\u00a0\u00a0\u00a0\u00a0arr[j], arr[j + 1] = arr[j + 1], arr[j]  \n\n# Input array \narr = [4,1,8,2,9,7,6,3] \n\n# Print the sorted array \nbubble_sort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n\u00a0\u00a0print (\"%d\" % arr[i]), \n# Output : 1 2 3 4 6 7 8 9"},{"instruction":"Create a Flask server that serves a webpage containing a form. When a user submits the form, the server should store the submitted data in a database.","input":"Form fields:\nName | Email | Message","output":"from flask import Flask, request, render_template \n\napp = Flask(__name__)\n\n@app.route('\/') \ndef index(): \n    return render_template('form_page.html')\n\n@app.route('\/submit', methods=['POST']) \ndef submit(): \n    if request.method == \"POST\": \n        name = request.form[\"name\"]\n        email = request.form[\"email\"]\n        message = request.form[\"message\"]\n\n        #Connect to database\n        db = connect_to_database() \n        #Insert data into database\n        db.execute(\"INSERT INTO submissions (name, email, message) VALUES (?, ?, ?)\", (name, email, message)) \n\nif __name__ == '__main__':\n    app.run(debug=True)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Flask server that serves a webpage containing a form. When a user submits the form, the server should store the submitted data in a database.\n\n### Input:\nForm fields:\nName | Email | Message\n\n### Response:\nfrom flask import Flask, request, render_template \n\napp = Flask(__name__)\n\n@app.route('\/') \ndef index(): \n    return render_template('form_page.html')\n\n@app.route('\/submit', methods=['POST']) \ndef submit(): \n    if request.method == \"POST\": \n        name = request.form[\"name\"]\n        email = request.form[\"email\"]\n        message = request.form[\"message\"]\n\n        #Connect to database\n        db = connect_to_database() \n        #Insert data into database\n        db.execute(\"INSERT INTO submissions (name, email, message) VALUES (?, ?, ?)\", (name, email, message)) \n\nif __name__ == '__main__':\n    app.run(debug=True)"},{"instruction":"Write a Python function to recognize a date (in \u201cDD\/MM\/YYYY\u201d format) in a string","input":"The deadline is 23\/05\/2020","output":"def recognize_date(s):\n    '''This function recognizes a date (in DD\/MM\/YYYY format) in a string.'''\n    # Regex for DD\/MM\/YYYY format\n    format_regex = re.compile(r'\\d{2}\/\\d{2}\/\\d{4}') \n    match = format_regex.search(s)\n    if match:\n        date = match.group()\n        return date\n    else:\n        return None","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to recognize a date (in \u201cDD\/MM\/YYYY\u201d format) in a string\n\n### Input:\nThe deadline is 23\/05\/2020\n\n### Response:\ndef recognize_date(s):\n    '''This function recognizes a date (in DD\/MM\/YYYY format) in a string.'''\n    # Regex for DD\/MM\/YYYY format\n    format_regex = re.compile(r'\\d{2}\/\\d{2}\/\\d{4}') \n    match = format_regex.search(s)\n    if match:\n        date = match.group()\n        return date\n    else:\n        return None"},{"instruction":"Write a JavaScript code snippet to set a timer to alert a message after 5 seconds.","input":"","output":"setTimeout(() => {\n  alert('Message after 5 seconds')\n}, 5000)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a JavaScript code snippet to set a timer to alert a message after 5 seconds.\n\n### Input:\n\n\n### Response:\nsetTimeout(() => {\n  alert('Message after 5 seconds')\n}, 5000)"},{"instruction":"Can you create a function in JavaScript to detect if an element appears in an array?","input":"[1, 3, 5, 7, 9]","output":"function containsElement(arr, element) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == element) {\n            return true;\n        }\n    }\n    return false;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a function in JavaScript to detect if an element appears in an array?\n\n### Input:\n[1, 3, 5, 7, 9]\n\n### Response:\nfunction containsElement(arr, element) {\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == element) {\n            return true;\n        }\n    }\n    return false;\n}"},{"instruction":"Write a JavaScript program to create a time stamp from the current system time.","input":"","output":"let now = new Date();\nlet timestamp = now.getTime();\n\nconsole.log(timestamp);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a JavaScript program to create a time stamp from the current system time.\n\n### Input:\n\n\n### Response:\nlet now = new Date();\nlet timestamp = now.getTime();\n\nconsole.log(timestamp);"},{"instruction":"Mobile objects may need to be tracked using GPS. Design an algorithm to track moving objects using GPS.","input":"","output":"def track_object_with_GPS(current_location, target_location):\n    # initialize distance \n    distance = None\n \n    # calculate the distance from the current position to the target location\n    distance = calculate_distance(current_location, target_location)\n \n    # if distance is greater than specified limit\n    if distance > specified_limit:\n        # adjust the GPS coordinates of the device towards the target\n        current_location = adjust_location(current_location, target_location)\n \n    # return the adjusted location\n    return current_location","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMobile objects may need to be tracked using GPS. Design an algorithm to track moving objects using GPS.\n\n### Input:\n\n\n### Response:\ndef track_object_with_GPS(current_location, target_location):\n    # initialize distance \n    distance = None\n \n    # calculate the distance from the current position to the target location\n    distance = calculate_distance(current_location, target_location)\n \n    # if distance is greater than specified limit\n    if distance > specified_limit:\n        # adjust the GPS coordinates of the device towards the target\n        current_location = adjust_location(current_location, target_location)\n \n    # return the adjusted location\n    return current_location"},{"instruction":"Create a REST API using the given endpoint.","input":"a \"GET\" request to \"\/products\"","output":"import flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] =True\n\n@app.route('\/products', methods=['GET'])\ndef get_all_products():\n    products = [\n        {\n            'name': 'Product A',\n            'price': '$19.99'\n        },\n        {\n            'name': 'Product B',\n            'price': '$15.99'\n        },\n        {\n            'name': 'Product C',\n            'price': '$17.99'\n        }\n    ]\n    return jsonify({'products': products})\n\nif __name__ == '__main__':\n    app.run()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API using the given endpoint.\n\n### Input:\na \"GET\" request to \"\/products\"\n\n### Response:\nimport flask\nfrom flask import request, jsonify\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] =True\n\n@app.route('\/products', methods=['GET'])\ndef get_all_products():\n    products = [\n        {\n            'name': 'Product A',\n            'price': '$19.99'\n        },\n        {\n            'name': 'Product B',\n            'price': '$15.99'\n        },\n        {\n            'name': 'Product C',\n            'price': '$17.99'\n        }\n    ]\n    return jsonify({'products': products})\n\nif __name__ == '__main__':\n    app.run()"},{"instruction":"Create a Groovy script to print out the current time on the console.","input":"Not applicable","output":"import java.time.LocalTime\n \nprintln \"Current Time : ${LocalTime.now()}\"","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Groovy script to print out the current time on the console.\n\n### Input:\nNot applicable\n\n### Response:\nimport java.time.LocalTime\n \nprintln \"Current Time : ${LocalTime.now()}\""},{"instruction":"Develop an AI program that can recognize a pattern from a given set of data points","input":"A set of 10 two-dimensional points","output":"import numpy as np\nfrom sklearn.cluster import MeanShift\n\ndef pattern_recognition(data):\n    X = np.array(data)\n    ms = MeanShift(bandwidth=15)\n    ms.fit(X)\n    labels = ms.labels_\n    clusters = len(np.unique(labels))\n    return clusters","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI program that can recognize a pattern from a given set of data points\n\n### Input:\nA set of 10 two-dimensional points\n\n### Response:\nimport numpy as np\nfrom sklearn.cluster import MeanShift\n\ndef pattern_recognition(data):\n    X = np.array(data)\n    ms = MeanShift(bandwidth=15)\n    ms.fit(X)\n    labels = ms.labels_\n    clusters = len(np.unique(labels))\n    return clusters"},{"instruction":"Write a Java function to check if a string is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward.","input":"Not applicable","output":"public static boolean isPalindrome(String str) {\n int len = str.length();\n for (int i = 0; i < len\/2; i++) {\n if (str.charAt(i) != str.charAt(len-i-1)) {\n return false;\n  }\n }\n return true;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Java function to check if a string is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward.\n\n### Input:\nNot applicable\n\n### Response:\npublic static boolean isPalindrome(String str) {\n int len = str.length();\n for (int i = 0; i < len\/2; i++) {\n if (str.charAt(i) != str.charAt(len-i-1)) {\n return false;\n  }\n }\n return true;\n}"},{"instruction":"Perform a modified breadth-first search to maximize the distance between connected nodes.","input":"Graph:\n \n \nA  -- B\n|   |  \nC  -- D","output":"def modifiedBFS(graph, start):\n visited = set()\n queue = [start]\n \n while queue:\n  node = queue.pop(0)\n  if node not in visited:\n   visited.add(node)\n   for neighbour in graph[node]:\n    queue.append(neighbour)\n    if len(queue)>1:\n     queue.pop(0)\n \n return visited\n \ngraph = {\n 'A': ['B','C'],\n 'B': ['A','D'],\n 'C': ['A','D'],\n 'D': ['B','C']\n}\n\nmodifiedBFS(graph, 'A') #output: {'A', 'C', 'D', 'B'}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform a modified breadth-first search to maximize the distance between connected nodes.\n\n### Input:\nGraph:\n \n \nA  -- B\n|   |  \nC  -- D\n\n### Response:\ndef modifiedBFS(graph, start):\n visited = set()\n queue = [start]\n \n while queue:\n  node = queue.pop(0)\n  if node not in visited:\n   visited.add(node)\n   for neighbour in graph[node]:\n    queue.append(neighbour)\n    if len(queue)>1:\n     queue.pop(0)\n \n return visited\n \ngraph = {\n 'A': ['B','C'],\n 'B': ['A','D'],\n 'C': ['A','D'],\n 'D': ['B','C']\n}\n\nmodifiedBFS(graph, 'A') #output: {'A', 'C', 'D', 'B'}"},{"instruction":"Generate a program in PHP to find the maximum from a given list of numbers.","input":"[1,4,7,9,2]","output":"<?php\n \nfunction findMax($arr)\n{\n    $max = 0;\n \n    foreach($arr as $val)\n    {\n        if($val > $max)\n            $max = $val;\n    }\n \n    return $max;\n}\n \n$arr = array(1,4,7,9,2);\necho \"The max value in given array is  \" . findMax($arr);\n?>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in PHP to find the maximum from a given list of numbers.\n\n### Input:\n[1,4,7,9,2]\n\n### Response:\n<?php\n \nfunction findMax($arr)\n{\n    $max = 0;\n \n    foreach($arr as $val)\n    {\n        if($val > $max)\n            $max = $val;\n    }\n \n    return $max;\n}\n \n$arr = array(1,4,7,9,2);\necho \"The max value in given array is  \" . findMax($arr);\n?>"},{"instruction":"Create a responsive web page layout using CSS Flexbox.","input":"","output":"<style> \n  .container{\n    display: flex;\n    flex-direction: row;\n    align-items: center; \n  }\n  .item{\n    flex-grow:1;\n    flex-basis: 200px;\n    margin: 10px;\n  }\n<\/style>\n<div class=\"container\">\n  <div class=\"item\">Item 1<\/div> \n  <div class=\"item\">Item 2<\/div> \n  <div class=\"item\">Item 3<\/div> \n  <div class=\"item\">Item 4<\/div> \n  <div class=\"item\">Item 5<\/div> \n  <div class=\"item\">Item 6<\/div>\n<\/div>","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a responsive web page layout using CSS Flexbox.\n\n### Input:\n\n\n### Response:\n<style> \n  .container{\n    display: flex;\n    flex-direction: row;\n    align-items: center; \n  }\n  .item{\n    flex-grow:1;\n    flex-basis: 200px;\n    margin: 10px;\n  }\n<\/style>\n<div class=\"container\">\n  <div class=\"item\">Item 1<\/div> \n  <div class=\"item\">Item 2<\/div> \n  <div class=\"item\">Item 3<\/div> \n  <div class=\"item\">Item 4<\/div> \n  <div class=\"item\">Item 5<\/div> \n  <div class=\"item\">Item 6<\/div>\n<\/div>"},{"instruction":"Develop a Python script that receives two lists and returns a new list that contains a unique combination of all elements in the two lists.","input":"list1 = [1, 2, 3], list2 = [2, 3, 4]","output":"def combine_lists(list1, list2):\n result = list1 + list2\n return list(set(result))\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\n\nprint(combine_lists(list1, list2)) # [1, 2, 3, 4]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script that receives two lists and returns a new list that contains a unique combination of all elements in the two lists.\n\n### Input:\nlist1 = [1, 2, 3], list2 = [2, 3, 4]\n\n### Response:\ndef combine_lists(list1, list2):\n result = list1 + list2\n return list(set(result))\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4]\n\nprint(combine_lists(list1, list2)) # [1, 2, 3, 4]"},{"instruction":"Design a function to generate the Fibonacci series up to certain number.","input":"","output":"def fibonacci_series(number): \n    # First two numbers of the series are 0 and 1\n    a = 0\n    b = 1\n    print(\"Fibonacci Series:\")\n    print(a, b, end=\" \") \n  \n    # Generating other numbers \n    for i in range(2,number): # We are starting the loop from 2 because 0 and 1 are already printed\n        c = a + b\n        print(c, end=\" \")\n        a = b\n        b = c\n  \n# Driver Code \nfibonacci_series(10) \n  \n# Output:\n# Fibonacci Series: 0 1 1 2 3 5 8 13 21 34","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to generate the Fibonacci series up to certain number.\n\n### Input:\n\n\n### Response:\ndef fibonacci_series(number): \n    # First two numbers of the series are 0 and 1\n    a = 0\n    b = 1\n    print(\"Fibonacci Series:\")\n    print(a, b, end=\" \") \n  \n    # Generating other numbers \n    for i in range(2,number): # We are starting the loop from 2 because 0 and 1 are already printed\n        c = a + b\n        print(c, end=\" \")\n        a = b\n        b = c\n  \n# Driver Code \nfibonacci_series(10) \n  \n# Output:\n# Fibonacci Series: 0 1 1 2 3 5 8 13 21 34"},{"instruction":"Write a Python function to convert an Celsius temperature to Fahrenheit.","input":"","output":"def celsius_to_fahrenheit(celsius): \n    fahrenheit = celsius * 9\/5 + 32\n    return fahrenheit","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to convert an Celsius temperature to Fahrenheit.\n\n### Input:\n\n\n### Response:\ndef celsius_to_fahrenheit(celsius): \n    fahrenheit = celsius * 9\/5 + 32\n    return fahrenheit"},{"instruction":"Using Java, write a function to convert an integer number to its equivalent Roman numeral representation.","input":"45","output":"public static String intToRoman(int num) \n    { \n     \n        String thousands[] = {\"\", \"M\", \"MM\", \"MMM\"}; \n        String hundreds[] = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \n                            \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}; \n        String tens[] = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \n                      \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"}; \n        String ones[] = {\"\", \"I\", \"II\", \"III\", \"IV\", \n                        \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"}; \n          \n        String ans = thousands[num\/1000] + \n                hundreds[(num%1000)\/100] +  \n                tens[(num%100)\/10] +  \n                ones[num%10]; \n       \n        return ans; \n    }","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Java, write a function to convert an integer number to its equivalent Roman numeral representation.\n\n### Input:\n45\n\n### Response:\npublic static String intToRoman(int num) \n    { \n     \n        String thousands[] = {\"\", \"M\", \"MM\", \"MMM\"}; \n        String hundreds[] = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \n                            \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}; \n        String tens[] = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \n                      \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"}; \n        String ones[] = {\"\", \"I\", \"II\", \"III\", \"IV\", \n                        \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"}; \n          \n        String ans = thousands[num\/1000] + \n                hundreds[(num%1000)\/100] +  \n                tens[(num%100)\/10] +  \n                ones[num%10]; \n       \n        return ans; \n    }"},{"instruction":"Design a SQL query to find the average salary for each department.","input":"","output":"SELECT department, AVG(salary)\nFROM table\nGROUP BY department;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a SQL query to find the average salary for each department.\n\n### Input:\n\n\n### Response:\nSELECT department, AVG(salary)\nFROM table\nGROUP BY department;"},{"instruction":"Create a class in Python that makes a connection to an active database, and closes the connection when the class is deleted.","input":"","output":"class DatabaseConnection:\n    def __init__(self):\n        self.conn = psycopg2.connect(host=\"localhost\", database=\"mydb\")\n\n    def __del__(self):\n        self.conn.close()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that makes a connection to an active database, and closes the connection when the class is deleted.\n\n### Input:\n\n\n### Response:\nclass DatabaseConnection:\n    def __init__(self):\n        self.conn = psycopg2.connect(host=\"localhost\", database=\"mydb\")\n\n    def __del__(self):\n        self.conn.close()"},{"instruction":"Create Java code to find the largest number in an array list.","input":"[2, 3, 9, 5, 11]","output":"public static int findMax(int[] arr) {\n  int max = arr[0];\n  for(int i = 1; i < arr.length; i++) {\n    if(arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate Java code to find the largest number in an array list.\n\n### Input:\n[2, 3, 9, 5, 11]\n\n### Response:\npublic static int findMax(int[] arr) {\n  int max = arr[0];\n  for(int i = 1; i < arr.length; i++) {\n    if(arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}"},{"instruction":"Design a Flask endpoint that receives customer information from a POST request and saves the information to a database.","input":"Not applicable","output":"@app.route('\/customers', methods=['POST'])\ndef create_customer():\n data = request.get_json()\n \n # Create a new customer using the data\n customer = Customer(name=data['name'], age=data['age'], email=data['email'])\n \n # Save the customer to the database\n db.session.add(customer)\n db.session.commit()\n \n return jsonify({'message': 'Customer created successfully!'}), 201","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Flask endpoint that receives customer information from a POST request and saves the information to a database.\n\n### Input:\nNot applicable\n\n### Response:\n@app.route('\/customers', methods=['POST'])\ndef create_customer():\n data = request.get_json()\n \n # Create a new customer using the data\n customer = Customer(name=data['name'], age=data['age'], email=data['email'])\n \n # Save the customer to the database\n db.session.add(customer)\n db.session.commit()\n \n return jsonify({'message': 'Customer created successfully!'}), 201"},{"instruction":"Generate a Java program that reads in a 4x4 array and prints the sum of each row","input":"","output":"import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int [][] array = new int[4][4];\n        \n        \/\/Read in the 4x4 array\n        for (int i=0; i<4; i++) {\n            for (int j=0; j<4; j++) {\n                System.out.print(\"Please enter the value of a[\"+i+\"][\"+j+\"]: \");\n                array[i][j] = scanner.nextInt();\n            }\n        }\n        \n        \/\/Print the sum of each row\n        for (int i=0; i<4; i++) {\n            int sum = 0;\n            for (int j=0; j<4; j++) {\n                sum += array[i][j];\n            }\n            System.out.println(\"Row \" + i + \" Sum: \" + sum);\n        }\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Java program that reads in a 4x4 array and prints the sum of each row\n\n### Input:\n\n\n### Response:\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int [][] array = new int[4][4];\n        \n        \/\/Read in the 4x4 array\n        for (int i=0; i<4; i++) {\n            for (int j=0; j<4; j++) {\n                System.out.print(\"Please enter the value of a[\"+i+\"][\"+j+\"]: \");\n                array[i][j] = scanner.nextInt();\n            }\n        }\n        \n        \/\/Print the sum of each row\n        for (int i=0; i<4; i++) {\n            int sum = 0;\n            for (int j=0; j<4; j++) {\n                sum += array[i][j];\n            }\n            System.out.println(\"Row \" + i + \" Sum: \" + sum);\n        }\n    }\n}"},{"instruction":"Create a program that takes a sentence as input and prints out the number of words starting with a given letter of the alphabet","input":"letter = 'h'\nsentence = \"Hello, World!\"","output":"def count_words_starting_with(letter, sentence):\n  count = 0\n  for word in sentence.split():\n    if word[0] == letter:\n      count += 1\n  return count","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that takes a sentence as input and prints out the number of words starting with a given letter of the alphabet\n\n### Input:\nletter = 'h'\nsentence = \"Hello, World!\"\n\n### Response:\ndef count_words_starting_with(letter, sentence):\n  count = 0\n  for word in sentence.split():\n    if word[0] == letter:\n      count += 1\n  return count"},{"instruction":"Given three numbers, write a Python program that prints the largest among them.","input":"","output":"def max_of_three(x, y, z):\n    max_num = x\n    if y > max_num:\n        max_num = y\n    if z > max_num:\n        max_num = z\n    return max_num","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven three numbers, write a Python program that prints the largest among them.\n\n### Input:\n\n\n### Response:\ndef max_of_three(x, y, z):\n    max_num = x\n    if y > max_num:\n        max_num = y\n    if z > max_num:\n        max_num = z\n    return max_num"},{"instruction":"Create a JavaScript object representing an employee, that stores their name, age and salary.","input":"Not applicable","output":"const employee = {\n name: 'John Doe',\n age: 37,\n salary: 3000\n};","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a JavaScript object representing an employee, that stores their name, age and salary.\n\n### Input:\nNot applicable\n\n### Response:\nconst employee = {\n name: 'John Doe',\n age: 37,\n salary: 3000\n};"},{"instruction":"Write a JavaScript program to take a given array of numbers and find the mode (most common value) of the array.","input":"[1, 1, 2, 3, 4, 4, 4, 5]","output":"function mode(arr) {\n const map = {};\n let maxEl = arr[0],\n maxCount = 1;\n\n for (const i of arr) {\n  if (map[i] == null) {\n   map[i] = 1;\n  } else {\n   map[i]++;  \n  }\n  if (map[i] > maxCount) {\n   maxEl = i;\n   maxCount = map[i];\n  }\n }\n return maxEl;\n}\n\nconst arr = [1, 1, 2, 3, 4, 4, 4, 5];\nconsole.log(mode(arr)); \/\/ 4","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a JavaScript program to take a given array of numbers and find the mode (most common value) of the array.\n\n### Input:\n[1, 1, 2, 3, 4, 4, 4, 5]\n\n### Response:\nfunction mode(arr) {\n const map = {};\n let maxEl = arr[0],\n maxCount = 1;\n\n for (const i of arr) {\n  if (map[i] == null) {\n   map[i] = 1;\n  } else {\n   map[i]++;  \n  }\n  if (map[i] > maxCount) {\n   maxEl = i;\n   maxCount = map[i];\n  }\n }\n return maxEl;\n}\n\nconst arr = [1, 1, 2, 3, 4, 4, 4, 5];\nconsole.log(mode(arr)); \/\/ 4"},{"instruction":"Implement a data structure that stores an integer and provides methods for querying and adjusting the value.","input":"","output":"class IntegerWrapper { \n    private int value; \n    \n    public IntegerWrapper(int value) { \n        this.value = value; \n    } \n    \n    public int getValue() { \n        return this.value; \n    } \n    \n    public void setValue(int value) { \n        this.value = value; \n    }\n    \n    public int increment() { \n        this.value++; \n        return this.value; \n    } \n    \n    public int decrement() { \n        this.value--; \n        return this.value; \n    } \n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a data structure that stores an integer and provides methods for querying and adjusting the value.\n\n### Input:\n\n\n### Response:\nclass IntegerWrapper { \n    private int value; \n    \n    public IntegerWrapper(int value) { \n        this.value = value; \n    } \n    \n    public int getValue() { \n        return this.value; \n    } \n    \n    public void setValue(int value) { \n        this.value = value; \n    }\n    \n    public int increment() { \n        this.value++; \n        return this.value; \n    } \n    \n    public int decrement() { \n        this.value--; \n        return this.value; \n    } \n}"},{"instruction":"Develop a JavaScript web application that displays the latest cryptocurrency prices.","input":"Not applicable","output":"import React from 'react';\nimport { render } from 'react-dom';\nimport axios from 'axios';\n\nclass CryptoPrices extends React.Component {\n\n constructor() {\n super();\n this.state = {\n prices: []\n }\n }\n\n componentDidMount() {\n axios.get(\"https:\/\/api.coinbase.com\/v2\/prices\/spot?currency=USD\")\n .then(response => {\n this.setState({ prices: response.data.data })\n })\n }\n\n render() {\n const { prices } = this.state;\n\n const priceList = prices.length ? (\n prices.map(price => {\n return (\n <div key={price.id}>\n <h3>{price.base}<\/h3>\n <h5>{price.amount}<\/h5>\n <\/div>\n )\n })\n ) : (\n <p>Loading...<\/p>\n );\n\n return (\n <div>\n {priceList}\n <\/div>\n )\n }\n}\n\nrender(<CryptoPrices \/>, document.getElementById('root'));","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a JavaScript web application that displays the latest cryptocurrency prices.\n\n### Input:\nNot applicable\n\n### Response:\nimport React from 'react';\nimport { render } from 'react-dom';\nimport axios from 'axios';\n\nclass CryptoPrices extends React.Component {\n\n constructor() {\n super();\n this.state = {\n prices: []\n }\n }\n\n componentDidMount() {\n axios.get(\"https:\/\/api.coinbase.com\/v2\/prices\/spot?currency=USD\")\n .then(response => {\n this.setState({ prices: response.data.data })\n })\n }\n\n render() {\n const { prices } = this.state;\n\n const priceList = prices.length ? (\n prices.map(price => {\n return (\n <div key={price.id}>\n <h3>{price.base}<\/h3>\n <h5>{price.amount}<\/h5>\n <\/div>\n )\n })\n ) : (\n <p>Loading...<\/p>\n );\n\n return (\n <div>\n {priceList}\n <\/div>\n )\n }\n}\n\nrender(<CryptoPrices \/>, document.getElementById('root'));"},{"instruction":"Create a Python algorithm to demonstrate a most efficient way to find the minimum index of a given number in an array.","input":"arr = [3,4,1,5,2]\nnum = 5","output":"arr = [3,4,1,5,2]\n\n# Function to find the minimum index \ndef minIndex(arr, num): \n    minIndex = -1\n    min_val = float('inf') \n  \n    # Find the minimum index \n    for j in range(0, len(arr)):  \n        if num == arr[j] and min_val > j: \n            min_val = j \n            minIndex = min_val  \n  \n    return minIndex \n\n# Driver Code \nnum = 5\nprint(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to demonstrate a most efficient way to find the minimum index of a given number in an array.\n\n### Input:\narr = [3,4,1,5,2]\nnum = 5\n\n### Response:\narr = [3,4,1,5,2]\n\n# Function to find the minimum index \ndef minIndex(arr, num): \n    minIndex = -1\n    min_val = float('inf') \n  \n    # Find the minimum index \n    for j in range(0, len(arr)):  \n        if num == arr[j] and min_val > j: \n            min_val = j \n            minIndex = min_val  \n  \n    return minIndex \n\n# Driver Code \nnum = 5\nprint(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)"},{"instruction":"Can you suggest an algorithm for finding all the permutations of a given string in Python?","input":"","output":"def permutations(string):\n  if len(string) == 1:\n    return [string]\n  \n  result = []\n  for i in range(0, len(string)):\n    subString = string[0:i] + string[i+1: len(string)]\n    subPermutations = permutations(subString)\n    for j in range(0, len(subPermutations)):\n      result.append(string[i] + subPermutations[j])\n  \n  return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you suggest an algorithm for finding all the permutations of a given string in Python?\n\n### Input:\n\n\n### Response:\ndef permutations(string):\n  if len(string) == 1:\n    return [string]\n  \n  result = []\n  for i in range(0, len(string)):\n    subString = string[0:i] + string[i+1: len(string)]\n    subPermutations = permutations(subString)\n    for j in range(0, len(subPermutations)):\n      result.append(string[i] + subPermutations[j])\n  \n  return result"},{"instruction":"Create a JavaScript program that uses the Fetch API to fetch data from an API endpoint and display the results in the console.","input":"Not applicable","output":"fetch('https:\/\/example.com\/data')\n .then(response => response.json())\n .then( data => {\n  console.log(data)\n })\n .catch(error => {\n  console.error('Error:', error);\n });","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a JavaScript program that uses the Fetch API to fetch data from an API endpoint and display the results in the console.\n\n### Input:\nNot applicable\n\n### Response:\nfetch('https:\/\/example.com\/data')\n .then(response => response.json())\n .then( data => {\n  console.log(data)\n })\n .catch(error => {\n  console.error('Error:', error);\n });"},{"instruction":"Create a function to search an array and return true if the given element is present in the array, else, return false.","input":"the_list = [1, 4, 9, 16, 25]","output":"def search(theList, element):\n    for el in the_list:\n        if el == element:\n            return True\n\n    return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to search an array and return true if the given element is present in the array, else, return false.\n\n### Input:\nthe_list = [1, 4, 9, 16, 25]\n\n### Response:\ndef search(theList, element):\n    for el in the_list:\n        if el == element:\n            return True\n\n    return False"},{"instruction":"Generate a Python program for creating a tiered dictionary with nested keys and values.","input":"Not applicable","output":"def generate_dict(keys, values):\n n = len(keys)\n if n != len(values):\n  return None\n\n dct = {}\n for i in range(n):\n  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])\n\n return dct\n\nkeys = [\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019]\nvalues = [1, 2, 3, 4]\nresult = generate_dict(keys, values)\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program for creating a tiered dictionary with nested keys and values.\n\n### Input:\nNot applicable\n\n### Response:\ndef generate_dict(keys, values):\n n = len(keys)\n if n != len(values):\n  return None\n\n dct = {}\n for i in range(n):\n  dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i])\n\n return dct\n\nkeys = [\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019]\nvalues = [1, 2, 3, 4]\nresult = generate_dict(keys, values)\nprint(result)"},{"instruction":"Create a program that analyzes some given data and produces a report.","input":"","output":"import pandas as pd\n\ndef generate_report(data):\n    \"\"\"\n    Generate a report from some given data \n    \"\"\"\n    df = pd.DataFrame(data)\n    report = dict()\n\n    # Generate report\n    report['total_entries'] = df.shape[0]\n    report['mean_value'] = df.mean()\n    report['min_value'] = df.min()\n    report['max_value'] = df.max()\n    report['variance'] = df.var()\n    report['standard_deviation'] = df.std()\n    \n    # Return report\n    return report","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that analyzes some given data and produces a report.\n\n### Input:\n\n\n### Response:\nimport pandas as pd\n\ndef generate_report(data):\n    \"\"\"\n    Generate a report from some given data \n    \"\"\"\n    df = pd.DataFrame(data)\n    report = dict()\n\n    # Generate report\n    report['total_entries'] = df.shape[0]\n    report['mean_value'] = df.mean()\n    report['min_value'] = df.min()\n    report['max_value'] = df.max()\n    report['variance'] = df.var()\n    report['standard_deviation'] = df.std()\n    \n    # Return report\n    return report"},{"instruction":"Develop a C++ program to remove all duplicated elements in an array","input":"","output":"#include <iostream> \n#include <unordered_set> \nusing namespace std; \n  \nint removeDuplicates(int arr[], int n) \n{ \n    unordered_set<int> seen; \n    int j = 0; \n    for (int i = 0; i < n; i++) { \n        if (seen.find(arr[i]) == seen.end()) { \n            seen.insert(arr[i]); \n            arr[j++] = arr[i]; \n        } \n    } \n    return j; \n} \nint main() \n{ \n    int arr[] = { 1, 5, 2, 1, 4, 5, 3, 4, 6 }; \n    int n = sizeof(arr) \/ sizeof(arr[0]); \n   \n    \/\/ remove duplicates \n    n = removeDuplicates(arr, n); \n  \n    for (int i = 0; i < n; i++) \n        cout << arr[i] << \" \"; \n  \n    return 0; \n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a C++ program to remove all duplicated elements in an array\n\n### Input:\n\n\n### Response:\n#include <iostream> \n#include <unordered_set> \nusing namespace std; \n  \nint removeDuplicates(int arr[], int n) \n{ \n    unordered_set<int> seen; \n    int j = 0; \n    for (int i = 0; i < n; i++) { \n        if (seen.find(arr[i]) == seen.end()) { \n            seen.insert(arr[i]); \n            arr[j++] = arr[i]; \n        } \n    } \n    return j; \n} \nint main() \n{ \n    int arr[] = { 1, 5, 2, 1, 4, 5, 3, 4, 6 }; \n    int n = sizeof(arr) \/ sizeof(arr[0]); \n   \n    \/\/ remove duplicates \n    n = removeDuplicates(arr, n); \n  \n    for (int i = 0; i < n; i++) \n        cout << arr[i] << \" \"; \n  \n    return 0; \n}"},{"instruction":"Construct a function that adds two given integers and returns the result.","input":"Not applicable","output":"function add(a, b){\n  let result = a + b;\n  return result;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function that adds two given integers and returns the result.\n\n### Input:\nNot applicable\n\n### Response:\nfunction add(a, b){\n  let result = a + b;\n  return result;\n}"},{"instruction":"Build an algorithm to remove all duplicate items from a linked list","input":"Linked List = [1 -> 2 -> 3 -> 2 -> 1]","output":"def remove_duplicates(head):\n  node = head\n  hash_map = {}\n  prev = None\n  \n  while node is not None:\n    if node.val in hash_map:\n      prev.next = node.next\n    else:\n      hash_map[node.val] = 1\n      prev = node\n    node = node.next\n\nremove_duplicates(head)  # returns [1 -> 2 -> 3]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an algorithm to remove all duplicate items from a linked list\n\n### Input:\nLinked List = [1 -> 2 -> 3 -> 2 -> 1]\n\n### Response:\ndef remove_duplicates(head):\n  node = head\n  hash_map = {}\n  prev = None\n  \n  while node is not None:\n    if node.val in hash_map:\n      prev.next = node.next\n    else:\n      hash_map[node.val] = 1\n      prev = node\n    node = node.next\n\nremove_duplicates(head)  # returns [1 -> 2 -> 3]"},{"instruction":"Create a query in SQL that finds the distinct records of a given table.","input":"","output":"SELECT DISTINCT * FROM table_name;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a query in SQL that finds the distinct records of a given table.\n\n### Input:\n\n\n### Response:\nSELECT DISTINCT * FROM table_name;"},{"instruction":"Print a message \"Hello World\" using the following output device.","input":"LED screen","output":"import time\nimport board\nimport adafruit_dotstar as dotstar\n\n# Setup a 1 x 8 green dotstar\ndotstar = dotstar.DotStar(board.SCK, board.MOSI,8, 1, brightness=.01)\ndotstar.fill((0, 255, 0))\n\n# loop through and print \"Hello World\nfor i in range(8): \n     dotstar[0, i] = (255, 0, 0) if i % 2 == 0 else (0, 0, 0)\n     dotstar.show()\n     time.sleep(0.25)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint a message \"Hello World\" using the following output device.\n\n### Input:\nLED screen\n\n### Response:\nimport time\nimport board\nimport adafruit_dotstar as dotstar\n\n# Setup a 1 x 8 green dotstar\ndotstar = dotstar.DotStar(board.SCK, board.MOSI,8, 1, brightness=.01)\ndotstar.fill((0, 255, 0))\n\n# loop through and print \"Hello World\nfor i in range(8): \n     dotstar[0, i] = (255, 0, 0) if i % 2 == 0 else (0, 0, 0)\n     dotstar.show()\n     time.sleep(0.25)"},{"instruction":"Generate a code to determine whether a given array of integers is a binary search tree.","input":"","output":"def is_BST(nums):\n  if len(nums) <= 1:\n    return True\n  mid = len(nums) \/\/ 2\n  left = nums[:mid]\n  right = nums[mid:]\n\n  if left and left[-1] > nums[mid]:\n    return False\n\n  if right and right[0] < nums[mid]:\n    return False\n  return is_BST(left) and is_BST(right)\n\nresult = is_BST([4, 2, 5, 1, 3])\nprint(result)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to determine whether a given array of integers is a binary search tree.\n\n### Input:\n\n\n### Response:\ndef is_BST(nums):\n  if len(nums) <= 1:\n    return True\n  mid = len(nums) \/\/ 2\n  left = nums[:mid]\n  right = nums[mid:]\n\n  if left and left[-1] > nums[mid]:\n    return False\n\n  if right and right[0] < nums[mid]:\n    return False\n  return is_BST(left) and is_BST(right)\n\nresult = is_BST([4, 2, 5, 1, 3])\nprint(result)"},{"instruction":"Generate pseudocode for a function that takes an array of intergers and return the lowest number.","input":"[4, 6, 3, 7, 2]","output":"FUNCTION lowest_number(arr):\n    lowest = arr[0]\n    FOR i IN range(arr.length):\n        IF arr[i] < lowest:\n            lowest = arr[i]\n    RETURN lowest","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate pseudocode for a function that takes an array of intergers and return the lowest number.\n\n### Input:\n[4, 6, 3, 7, 2]\n\n### Response:\nFUNCTION lowest_number(arr):\n    lowest = arr[0]\n    FOR i IN range(arr.length):\n        IF arr[i] < lowest:\n            lowest = arr[i]\n    RETURN lowest"},{"instruction":"Design a code to automatically generate a phone number of 10 digits","input":"","output":"import random\n\ndef generatePhoneNumber():\n    number = ''\n    for i in range(10):\n        number += str(random.randint(0,9))\n    return number\n\nphoneNumber = generatePhoneNumber()\nprint(phoneNumber)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a code to automatically generate a phone number of 10 digits\n\n### Input:\n\n\n### Response:\nimport random\n\ndef generatePhoneNumber():\n    number = ''\n    for i in range(10):\n        number += str(random.randint(0,9))\n    return number\n\nphoneNumber = generatePhoneNumber()\nprint(phoneNumber)"},{"instruction":"Write a Java program to take a string input and count the number of vowels in it.","input":"String str = \"GPT\";","output":"public static int countVowels(String str) {\n\n    int count = 0;\n\n    for(int i = 0; i < str.length(); i++) {\n\n        if(str.charAt(i) == 'a' || str.charAt(i) == 'e' \n            || str.charAt(i) == 'i' || str.charAt(i) == 'o' \n            || str.charAt(i) == 'u') {\n\n            count++;\n        }\n    }\n    return count;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Java program to take a string input and count the number of vowels in it.\n\n### Input:\nString str = \"GPT\";\n\n### Response:\npublic static int countVowels(String str) {\n\n    int count = 0;\n\n    for(int i = 0; i < str.length(); i++) {\n\n        if(str.charAt(i) == 'a' || str.charAt(i) == 'e' \n            || str.charAt(i) == 'i' || str.charAt(i) == 'o' \n            || str.charAt(i) == 'u') {\n\n            count++;\n        }\n    }\n    return count;\n}"},{"instruction":"Create a SQL statement to select all records from a table called \"users\".","input":"Not applicable","output":"SELECT * FROM users;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a SQL statement to select all records from a table called \"users\".\n\n### Input:\nNot applicable\n\n### Response:\nSELECT * FROM users;"},{"instruction":"Design a relational database schema to store student information, including name and age, as well as classes they have taken.","input":"","output":"students\n\n- student_id\n- name\n- age\n\nclasses\n\n- class_id\n- class_name\n\nstudent_classes\n\n- student_id\n- class_id","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a relational database schema to store student information, including name and age, as well as classes they have taken.\n\n### Input:\n\n\n### Response:\nstudents\n\n- student_id\n- name\n- age\n\nclasses\n\n- class_id\n- class_name\n\nstudent_classes\n\n- student_id\n- class_id"},{"instruction":"Create an algorithm to sort an array from smallest to largest using an insertion sort.","input":"arr = [3, 2, 5, 4, 1]","output":"def insertionSort(arr):\n    for i in range(1, len(arr)):\n        val = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > val:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = val\n    return arr\n\narr = [3, 2, 5, 4, 1]\nsortedArr = insertionSort(arr)\nprint(sortedArr)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to sort an array from smallest to largest using an insertion sort.\n\n### Input:\narr = [3, 2, 5, 4, 1]\n\n### Response:\ndef insertionSort(arr):\n    for i in range(1, len(arr)):\n        val = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > val:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = val\n    return arr\n\narr = [3, 2, 5, 4, 1]\nsortedArr = insertionSort(arr)\nprint(sortedArr)"},{"instruction":"Create a MySQL table to store a list of users with their names, emails and passwords.","input":"Not applicable","output":"CREATE TABLE users (\n id INT AUTO_INCREMENT PRIMARY KEY,\n name VARCHAR(50) NOT NULL,\n email VARCHAR(100) NOT NULL UNIQUE,\n password VARCHAR(100) NOT NULL\n);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a MySQL table to store a list of users with their names, emails and passwords.\n\n### Input:\nNot applicable\n\n### Response:\nCREATE TABLE users (\n id INT AUTO_INCREMENT PRIMARY KEY,\n name VARCHAR(50) NOT NULL,\n email VARCHAR(100) NOT NULL UNIQUE,\n password VARCHAR(100) NOT NULL\n);"},{"instruction":"Design a data structure in Java to store multiple IP addresses.","input":"","output":"import java.util.ArrayList;\n\npublic class IpAddressDataStructure {\n    ArrayList<String> ipAddresses = new ArrayList<String>();\n\n    public void addIpAddress(String ipAddress) { \n        ipAddresses.add(ipAddress);\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Java to store multiple IP addresses.\n\n### Input:\n\n\n### Response:\nimport java.util.ArrayList;\n\npublic class IpAddressDataStructure {\n    ArrayList<String> ipAddresses = new ArrayList<String>();\n\n    public void addIpAddress(String ipAddress) { \n        ipAddresses.add(ipAddress);\n    }\n}"},{"instruction":"Use zip() to create a new list containing the sum of the corresponding items of two given lists.","input":"list1 = [1, 2, 3] \nlist2 = [4, 5, 6]","output":"list3 = [x + y for x, y in zip(list1, list2)]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse zip() to create a new list containing the sum of the corresponding items of two given lists.\n\n### Input:\nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6]\n\n### Response:\nlist3 = [x + y for x, y in zip(list1, list2)]"},{"instruction":"Construct an SQL statement to update a student's score from 65 to 90 in the Students table.","input":"Table: Students\nFields: StudentID, StudentName, StudentScore\nId: 1","output":"UPDATE Students\nSET StudentScore = 90\nWHERE StudentID = 1;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an SQL statement to update a student's score from 65 to 90 in the Students table.\n\n### Input:\nTable: Students\nFields: StudentID, StudentName, StudentScore\nId: 1\n\n### Response:\nUPDATE Students\nSET StudentScore = 90\nWHERE StudentID = 1;"},{"instruction":"Rewrite the following code to work with a pandas DataFrame.","input":"data = [[1, 2, 3], [4, 5, 6]]","output":"import pandas as pd\n\ndef DataFrame_rewrite(data):\n    \"\"\" Rewrite the code to work with a pandas DataFrame. \"\"\"\n    df = pd.DataFrame(data)\n    return df\n\nDataFrame_rewrite(data)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code to work with a pandas DataFrame.\n\n### Input:\ndata = [[1, 2, 3], [4, 5, 6]]\n\n### Response:\nimport pandas as pd\n\ndef DataFrame_rewrite(data):\n    \"\"\" Rewrite the code to work with a pandas DataFrame. \"\"\"\n    df = pd.DataFrame(data)\n    return df\n\nDataFrame_rewrite(data)"},{"instruction":"Edit the given Python program to return the absolute value of a given number","input":"def absolute_value(x):\n    if x < 0:\n        return -x","output":"def absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python program to return the absolute value of a given number\n\n### Input:\ndef absolute_value(x):\n    if x < 0:\n        return -x\n\n### Response:\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x"},{"instruction":"Generate a C++ program to calculate the maximum of a set of values.","input":"2, 3, 7, 11, 16","output":"#include <iostream>\n\nint main() {\n    int nums[] = {2, 3, 7, 11, 16};\n    int max = nums[0];\n\n    for (int i = 1; i < 5; i++)\n    {\n        if (nums[i] > max)\n        {\n            max = nums[i];\n        }\n    }\n    std::cout << \"The maximum is \" << max << std::endl;\n    return 0;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a C++ program to calculate the maximum of a set of values.\n\n### Input:\n2, 3, 7, 11, 16\n\n### Response:\n#include <iostream>\n\nint main() {\n    int nums[] = {2, 3, 7, 11, 16};\n    int max = nums[0];\n\n    for (int i = 1; i < 5; i++)\n    {\n        if (nums[i] > max)\n        {\n            max = nums[i];\n        }\n    }\n    std::cout << \"The maximum is \" << max << std::endl;\n    return 0;\n}"},{"instruction":"Create an SQL query that will output the list of student ages who are 26 years or older.","input":"Table: student\nFields: student_name, age","output":"SELECT student_name, age \nFROM student \nWHERE age >= 26","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an SQL query that will output the list of student ages who are 26 years or older.\n\n### Input:\nTable: student\nFields: student_name, age\n\n### Response:\nSELECT student_name, age \nFROM student \nWHERE age >= 26"},{"instruction":"Create a function in Python to print the top five characters from the provided string in descending order of frequency.","input":"aaabbbcccccc","output":"def top_five_characters(string):\n    char_freq = {}\n    for char in string: \n        if char in char_freq: \n            char_freq[char] += 1\n        else: \n            char_freq[char] = 1\n    # Sort the Characters in descending order of frequency\n    sorted_freq = sorted(char_freq, key=char_freq.get, reverse=True)[:5]\n    return sorted_freq\nprint(top_five_characters('aaabbbcccccc'))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to print the top five characters from the provided string in descending order of frequency.\n\n### Input:\naaabbbcccccc\n\n### Response:\ndef top_five_characters(string):\n    char_freq = {}\n    for char in string: \n        if char in char_freq: \n            char_freq[char] += 1\n        else: \n            char_freq[char] = 1\n    # Sort the Characters in descending order of frequency\n    sorted_freq = sorted(char_freq, key=char_freq.get, reverse=True)[:5]\n    return sorted_freq\nprint(top_five_characters('aaabbbcccccc'))"},{"instruction":"Create a javascript code to invert a binary tree.","input":"A binary tree with nodes and child nodes.","output":"function invertTree(root) {\n    if (root == null) return;\n    [root.left, root.right] = [invertTree(root.right), invertTree(root.left)];\n    return root;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a javascript code to invert a binary tree.\n\n### Input:\nA binary tree with nodes and child nodes.\n\n### Response:\nfunction invertTree(root) {\n    if (root == null) return;\n    [root.left, root.right] = [invertTree(root.right), invertTree(root.left)];\n    return root;\n}"},{"instruction":"Write a bash script that creates a directory.","input":"","output":"#!\/bin\/bash\n\n#create a new directory\nmkdir new_directory","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a bash script that creates a directory.\n\n### Input:\n\n\n### Response:\n#!\/bin\/bash\n\n#create a new directory\nmkdir new_directory"},{"instruction":"Optimize a simple for-loop for better performance in C++.","input":"for (int i = 0; i < n; i++) \n{ \n    \/\/code\n}","output":"\/\/ Replace loop with standard library algorithm\nint n = 100;\nstd::vector<int> vec(n);\nstd::for_each(vec.begin(), vec.end(), [](int& elem){\n    \/\/code\n});\n\n\/\/ or use a parallel_for for better performance\nint n = 100;\nstd::vector<int> vec(n);\ntbb::parallel_for(tbb::blocked_range<int>(0, n), \n    [](const tbb::blocked_range<int>& r){\n    for (int i = r.begin(); i != r.end(); ++i) \n    { \n         \/\/code\n    } \n});","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a simple for-loop for better performance in C++.\n\n### Input:\nfor (int i = 0; i < n; i++) \n{ \n    \/\/code\n}\n\n### Response:\n\/\/ Replace loop with standard library algorithm\nint n = 100;\nstd::vector<int> vec(n);\nstd::for_each(vec.begin(), vec.end(), [](int& elem){\n    \/\/code\n});\n\n\/\/ or use a parallel_for for better performance\nint n = 100;\nstd::vector<int> vec(n);\ntbb::parallel_for(tbb::blocked_range<int>(0, n), \n    [](const tbb::blocked_range<int>& r){\n    for (int i = r.begin(); i != r.end(); ++i) \n    { \n         \/\/code\n    } \n});"},{"instruction":"Generate a python program to determine if two objects are mutually exclusive or not.","input":"Input objects are ([1,2,3], [4,5,6]).","output":"def mutually_exclusive(object1, object2):\n    if len(object1.intersection(object2)) > 0:\n        return False\n    else:\n        return True\n    \nobject1 = set([1, 2, 3])\nobject2 = set([4, 5, 6])\n\nresult = mutually_exclusive(object1, object2)\nprint(result) # Outputs True as objects don't share elements.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to determine if two objects are mutually exclusive or not.\n\n### Input:\nInput objects are ([1,2,3], [4,5,6]).\n\n### Response:\ndef mutually_exclusive(object1, object2):\n    if len(object1.intersection(object2)) > 0:\n        return False\n    else:\n        return True\n    \nobject1 = set([1, 2, 3])\nobject2 = set([4, 5, 6])\n\nresult = mutually_exclusive(object1, object2)\nprint(result) # Outputs True as objects don't share elements."},{"instruction":"Write a function apiset to set up an API with a given library.","input":"jQuery","output":"function apiset (library) {\n    if (library == 'jQuery') {\n        $.ajax({ \n            url: 'https:\/\/api.example.com\/json\/',\n            type: 'GET',\n            dataType: 'jsonp',\n            success: function (data) {\n                \/\/Other instructions.\n            }\n        });\n    };\n};","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function apiset to set up an API with a given library.\n\n### Input:\njQuery\n\n### Response:\nfunction apiset (library) {\n    if (library == 'jQuery') {\n        $.ajax({ \n            url: 'https:\/\/api.example.com\/json\/',\n            type: 'GET',\n            dataType: 'jsonp',\n            success: function (data) {\n                \/\/Other instructions.\n            }\n        });\n    };\n};"},{"instruction":"Write a Kotlin program to reverse the contents of a string.","input":"<no input>","output":"fun main() {\n    val str = \"Hello\"\n    val reversedStr = str.reversed()\n\n    println(\"The original string is: $str\")\n    println(\"The reversed string is: $reversedStr\")\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Kotlin program to reverse the contents of a string.\n\n### Input:\n<no input>\n\n### Response:\nfun main() {\n    val str = \"Hello\"\n    val reversedStr = str.reversed()\n\n    println(\"The original string is: $str\")\n    println(\"The reversed string is: $reversedStr\")\n}"},{"instruction":"Design a Python program to generate a frequency distribution report given a list of input words.","input":"[\u2018hello\u2019, \u2018world\u2019, \u2018hello\u2019, \u2018welcome\u2019, \u2019world\u2019]","output":"from collections import Counter\n\ndef print_frequency_report(words):\n    word_frequencies = Counter(words)\n    print('Word\\tFrequency')\n    print('==============')\n    for word, frequency in word_frequencies.items():\n        print('{}\\t{}'.format(word, frequency))","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to generate a frequency distribution report given a list of input words.\n\n### Input:\n[\u2018hello\u2019, \u2018world\u2019, \u2018hello\u2019, \u2018welcome\u2019, \u2019world\u2019]\n\n### Response:\nfrom collections import Counter\n\ndef print_frequency_report(words):\n    word_frequencies = Counter(words)\n    print('Word\\tFrequency')\n    print('==============')\n    for word, frequency in word_frequencies.items():\n        print('{}\\t{}'.format(word, frequency))"},{"instruction":"Design a custom-made API endpoint to retrieve all the orders created in the last 24 hours.","input":"0","output":"import datetime\n\nfrom flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Order(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n description = db.Column(db.String(120), unique=True)\n date_created = db.Column(db.DateTime, default=datetime.datetime.utcnow)\n\n@app.route('\/orders', methods=['GET'])\ndef get_orders():\n today = datetime.datetime.utcnow()\n orders = Order.query.filter(Order.date_created > today).all()\n\n response = jsonify([{\n 'id': order.id, \n 'description': order.description, \n 'date_created': order.date_created\n } for order in orders])\n\n response.status_code = 200\n return response","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a custom-made API endpoint to retrieve all the orders created in the last 24 hours.\n\n### Input:\n0\n\n### Response:\nimport datetime\n\nfrom flask import Flask, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(name)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:\/\/\/\/tmp\/test.db'\ndb = SQLAlchemy(app)\n\nclass Order(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n description = db.Column(db.String(120), unique=True)\n date_created = db.Column(db.DateTime, default=datetime.datetime.utcnow)\n\n@app.route('\/orders', methods=['GET'])\ndef get_orders():\n today = datetime.datetime.utcnow()\n orders = Order.query.filter(Order.date_created > today).all()\n\n response = jsonify([{\n 'id': order.id, \n 'description': order.description, \n 'date_created': order.date_created\n } for order in orders])\n\n response.status_code = 200\n return response"},{"instruction":"Construct a predicate in Prolog for finding those sets of numbers that have the same mean and median.","input":"Not Applicable","output":"% mean(List, Mean) succeeds if Mean is the arithmetic mean of the numbers in List.\nmean([], 0).\nmean([X], X).\nmean(List, Mean) :-\n    \\+ List = [],\n    \\+ List = [_],\n    append(L1, [X,Y|L2], List),\n    mean(L1, Mean1),\n    mean(L2, Mean2),\n    Mean is Mean1 + (X + Y) \/ 2.\n\n% median(List, Median) succeeds if Median is the median of the numbers in List.\nmedian([], 0).\nmedian([X], X).\nmedian(List, Median) :-\n    \\+ List = [],\n    \\+ List = [_],\n    append(L1, [X,Y|L2], List),\n    median(L1, Median1),\n    median(L2, Median2),\n    Median is Median1 + (X + Y) \/ 2.\n\n% same_mean_and_median(List) succeeds if the mean and median of the\n% numbers in List are the same.\nsame_mean_and_median(List) :-\n    mean(List, Mean),\n    median(List, Median),\n    Mean = Median.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a predicate in Prolog for finding those sets of numbers that have the same mean and median.\n\n### Input:\nNot Applicable\n\n### Response:\n% mean(List, Mean) succeeds if Mean is the arithmetic mean of the numbers in List.\nmean([], 0).\nmean([X], X).\nmean(List, Mean) :-\n    \\+ List = [],\n    \\+ List = [_],\n    append(L1, [X,Y|L2], List),\n    mean(L1, Mean1),\n    mean(L2, Mean2),\n    Mean is Mean1 + (X + Y) \/ 2.\n\n% median(List, Median) succeeds if Median is the median of the numbers in List.\nmedian([], 0).\nmedian([X], X).\nmedian(List, Median) :-\n    \\+ List = [],\n    \\+ List = [_],\n    append(L1, [X,Y|L2], List),\n    median(L1, Median1),\n    median(L2, Median2),\n    Median is Median1 + (X + Y) \/ 2.\n\n% same_mean_and_median(List) succeeds if the mean and median of the\n% numbers in List are the same.\nsame_mean_and_median(List) :-\n    mean(List, Mean),\n    median(List, Median),\n    Mean = Median."},{"instruction":"Construct a SQL query to return the total sum of the orders in the orders table.","input":"","output":"SELECT SUM(total_price)\nFROM orders;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a SQL query to return the total sum of the orders in the orders table.\n\n### Input:\n\n\n### Response:\nSELECT SUM(total_price)\nFROM orders;"},{"instruction":"Generate an Objective-C API Endpoint for a simple application for searching restaurants.","input":"Not applicable","output":"- (void) getRestaurantsNearLocation:(CLLocation*)location radius:(int)radius\n \n {\n    \/\/ Build the API request\n    NSString *urlString = [NSString stringWithFormat:@\"restaurants?lat=%f&long=%f&radius=%f\", location.coordinate.latitude, location.coordinate.longitude, radius];\n    \n    \/\/ Send the request\n    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n    [manager GET:urlString parameters:nil success:^(NSURLSessionDataTask *task, id responseObject) {\n        \/\/ Handle the response\n    } failure:^(NSURLSessionDataTask *task, NSError *error) {\n        \/\/ Handle the failure\n    }];\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an Objective-C API Endpoint for a simple application for searching restaurants.\n\n### Input:\nNot applicable\n\n### Response:\n- (void) getRestaurantsNearLocation:(CLLocation*)location radius:(int)radius\n \n {\n    \/\/ Build the API request\n    NSString *urlString = [NSString stringWithFormat:@\"restaurants?lat=%f&long=%f&radius=%f\", location.coordinate.latitude, location.coordinate.longitude, radius];\n    \n    \/\/ Send the request\n    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];\n    [manager GET:urlString parameters:nil success:^(NSURLSessionDataTask *task, id responseObject) {\n        \/\/ Handle the response\n    } failure:^(NSURLSessionDataTask *task, NSError *error) {\n        \/\/ Handle the failure\n    }];\n}"},{"instruction":"Write a function in PHP to make an POST HTTP request with a given URL and parameters and return the response.","input":"Not applicable","output":"function postRequest($url, $params) {\n $options = array(\n  'http' => array(\n    'header'  => \"Content-type: application\/x-www-form-urlencoded\\r\\n\",\n    'method'  => 'POST',\n    'content' => http_build_query($params)\n  )\n );\n $context  = stream_context_create($options);\n $result = file_get_contents($url, false, $context);\n if ($result === FALSE) { \/* Handle error *\/ }\n \n return $result;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in PHP to make an POST HTTP request with a given URL and parameters and return the response.\n\n### Input:\nNot applicable\n\n### Response:\nfunction postRequest($url, $params) {\n $options = array(\n  'http' => array(\n    'header'  => \"Content-type: application\/x-www-form-urlencoded\\r\\n\",\n    'method'  => 'POST',\n    'content' => http_build_query($params)\n  )\n );\n $context  = stream_context_create($options);\n $result = file_get_contents($url, false, $context);\n if ($result === FALSE) { \/* Handle error *\/ }\n \n return $result;\n}"},{"instruction":"Examine the given sql statement and identify errors.","input":"SELECT like FROM my_table WHERE first_name = 'john'","output":"Error: The SQL statement has an error because it should be 'SELECT * FROM my_table WHERE first_name = 'john'.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExamine the given sql statement and identify errors.\n\n### Input:\nSELECT like FROM my_table WHERE first_name = 'john'\n\n### Response:\nError: The SQL statement has an error because it should be 'SELECT * FROM my_table WHERE first_name = 'john'."},{"instruction":"Create a SQL query that fetches all customers from the \"customers\" table who have made a purchase within the last 30 days.","input":"Not applicable","output":"SELECT * \nFROM customers \nWHERE purchase_date > DATE_SUB(CURDATE(), INTERVAL 30 DAY);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a SQL query that fetches all customers from the \"customers\" table who have made a purchase within the last 30 days.\n\n### Input:\nNot applicable\n\n### Response:\nSELECT * \nFROM customers \nWHERE purchase_date > DATE_SUB(CURDATE(), INTERVAL 30 DAY);"},{"instruction":"Create a game using the Unity 3D engine.","input":"Not applicable","output":"using UnityEngine;\n\npublic class Game : MonoBehaviour\n{\n \/\/ Start is called before the first frame update\n void Start()\n {\n \/\/ Create game\n }\n\n \/\/ Update is called once per frame\n void Update()\n {\n \/\/ Update game\n }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a game using the Unity 3D engine.\n\n### Input:\nNot applicable\n\n### Response:\nusing UnityEngine;\n\npublic class Game : MonoBehaviour\n{\n \/\/ Start is called before the first frame update\n void Start()\n {\n \/\/ Create game\n }\n\n \/\/ Update is called once per frame\n void Update()\n {\n \/\/ Update game\n }\n}"},{"instruction":"Use a regular expression to identify all numbers in a given string.","input":"const str = \"The answer is 42 and 48.\";","output":"const str = \"The answer is 42 and 48.\";\nconst numRegex = \/\\d+\/g;\nconst nums = str.match(numRegex);\nconsole.log(nums); \/\/ Output: [ '42', '48' ]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a regular expression to identify all numbers in a given string.\n\n### Input:\nconst str = \"The answer is 42 and 48.\";\n\n### Response:\nconst str = \"The answer is 42 and 48.\";\nconst numRegex = \/\\d+\/g;\nconst nums = str.match(numRegex);\nconsole.log(nums); \/\/ Output: [ '42', '48' ]"},{"instruction":"Create a neural network classifier for breast cancer.","input":"","output":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nclass BreastCancerClassifier(object):\n    \n    def __init__(self, input_dim, output_dim, hidden_layers):\n        self.input_dim = input_dim\n        self.output_dim = output_dim\n        self.hidden_layers = hidden_layers\n        \n        self.model = self.create_model()\n\n    def create_model(self):\n        model = Sequential()\n        # Input layer\n        model.add(Dense(self.input_dim, activation=\"relu\", input_dim=self.input_dim))\n    \n        # Hidden layers\n        for num_neurons in self.hidden_layers:\n            model.add(Dense(num_neurons, activation=\"relu\"))\n\n        # Output layer \n        model.add(Dense(self.output_dim, activation=\"sigmoid\"))\n\n        model.compile(loss=\"binary_crossentropy\",\n            optimizer=\"adam\", metrics=[\"accuracy\"])\n\n        return model","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network classifier for breast cancer.\n\n### Input:\n\n\n### Response:\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\nclass BreastCancerClassifier(object):\n    \n    def __init__(self, input_dim, output_dim, hidden_layers):\n        self.input_dim = input_dim\n        self.output_dim = output_dim\n        self.hidden_layers = hidden_layers\n        \n        self.model = self.create_model()\n\n    def create_model(self):\n        model = Sequential()\n        # Input layer\n        model.add(Dense(self.input_dim, activation=\"relu\", input_dim=self.input_dim))\n    \n        # Hidden layers\n        for num_neurons in self.hidden_layers:\n            model.add(Dense(num_neurons, activation=\"relu\"))\n\n        # Output layer \n        model.add(Dense(self.output_dim, activation=\"sigmoid\"))\n\n        model.compile(loss=\"binary_crossentropy\",\n            optimizer=\"adam\", metrics=[\"accuracy\"])\n\n        return model"},{"instruction":"Create a class in Python to represent a Person with attributes: name, age, height, and weight.","input":"Not applicable","output":"class Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n\n def describe(self):\n return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a Person with attributes: name, age, height, and weight.\n\n### Input:\nNot applicable\n\n### Response:\nclass Person:\n def __init__(self, name, age, height, weight):\n self.name = name\n self.age = age\n self.height = height\n self.weight = weight\n\n def describe(self):\n return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'"},{"instruction":"Construct an algorithm for binary search in a sorted array.","input":"","output":"Create an algorithm for binary search in a sorted array. The algorithm should take an array and a search value as input and return the index of the element if it exists in the array. The algorithm should start by comparing the value to the element in the middle of the array. If the values match, the index should be returned. Otherwise, the algorithm should check if the value is greater or less than the element and then choose the left or right subarray accordingly. The process should be repeated until the value is found or all elements have been checked.","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm for binary search in a sorted array.\n\n### Input:\n\n\n### Response:\nCreate an algorithm for binary search in a sorted array. The algorithm should take an array and a search value as input and return the index of the element if it exists in the array. The algorithm should start by comparing the value to the element in the middle of the array. If the values match, the index should be returned. Otherwise, the algorithm should check if the value is greater or less than the element and then choose the left or right subarray accordingly. The process should be repeated until the value is found or all elements have been checked."},{"instruction":"Write an algorithm in Swift that performs a binary search.","input":"Not applicable","output":"func binarySearch(array: [Int], target: Int) -> Bool {\n var left = 0\n var right = array.count - 1\n\n while left <= right {\n let middle = (left + right) \/ 2\n let value = array[middle]\n\n if value == target {\n return true\n }\n\n if value < target {\n left = middle + 1\n } else {\n right = middle - 1\n }\n }\n\n return false\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Swift that performs a binary search.\n\n### Input:\nNot applicable\n\n### Response:\nfunc binarySearch(array: [Int], target: Int) -> Bool {\n var left = 0\n var right = array.count - 1\n\n while left <= right {\n let middle = (left + right) \/ 2\n let value = array[middle]\n\n if value == target {\n return true\n }\n\n if value < target {\n left = middle + 1\n } else {\n right = middle - 1\n }\n }\n\n return false\n}"},{"instruction":"Generate a function in C++ to find all prime numbers from 2 to a given number.","input":"Not applicable","output":"#include <iostream>\n\nvoid findAllPrimes(int n) {\n for (int i=2; i<=n; i++) {\n bool isPrime = true;\n for (int j=2; j<i\/2; j++) {\n if (i % j == 0) {\n isPrime = false;\n break;\n }\n }\n if (isPrime) {\n std::cout << i << \" \";\n }\n } \n std::cout << std::endl;\n}\n\nint main() {\n int n = 10;\n findAllPrimes(n);\n return 0;\n}\n\n\/\/ Output: 2 3 5 7","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in C++ to find all prime numbers from 2 to a given number.\n\n### Input:\nNot applicable\n\n### Response:\n#include <iostream>\n\nvoid findAllPrimes(int n) {\n for (int i=2; i<=n; i++) {\n bool isPrime = true;\n for (int j=2; j<i\/2; j++) {\n if (i % j == 0) {\n isPrime = false;\n break;\n }\n }\n if (isPrime) {\n std::cout << i << \" \";\n }\n } \n std::cout << std::endl;\n}\n\nint main() {\n int n = 10;\n findAllPrimes(n);\n return 0;\n}\n\n\/\/ Output: 2 3 5 7"},{"instruction":"Create a program to encrypt a message using a Caesar cipher.","input":"message = \"hello world\"","output":"def caesar_cipher_encrypt(message, shift):\n    encoded_message = ''\n    for c in message:\n        if c.isalpha():\n            num = ord(c)\n            num += shift\n            if c.isupper():\n                if num > ord('Z'):\n                    num -= 26\n                elif num < ord('A'):\n                    num += 26\n            elif c.islower():\n                if num > ord('z'):\n                    num -= 26\n                elif num < ord('a'):\n                    num += 26\n            encoded_message += chr(num)\n        else:\n            encoded_message += c\n    return encoded_message\n\nmessage = \"hello world\"\nencoded_message = caesar_cipher_encrypt(message, 10)\nprint(encoded_message)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to encrypt a message using a Caesar cipher.\n\n### Input:\nmessage = \"hello world\"\n\n### Response:\ndef caesar_cipher_encrypt(message, shift):\n    encoded_message = ''\n    for c in message:\n        if c.isalpha():\n            num = ord(c)\n            num += shift\n            if c.isupper():\n                if num > ord('Z'):\n                    num -= 26\n                elif num < ord('A'):\n                    num += 26\n            elif c.islower():\n                if num > ord('z'):\n                    num -= 26\n                elif num < ord('a'):\n                    num += 26\n            encoded_message += chr(num)\n        else:\n            encoded_message += c\n    return encoded_message\n\nmessage = \"hello world\"\nencoded_message = caesar_cipher_encrypt(message, 10)\nprint(encoded_message)"},{"instruction":"Implement a Java program to find the number of characters in the given string.","input":"\"Hello World\"","output":"public class CharacterCount {\n    public static int findCharCount(String str) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) != ' ')\n                count++;\n        }\n        return count;\n    }\n\n    public static void main(String args[]) {\n        String str = \"Hello World\";\n        int count  = findCharCount(str);\n        System.out.print(\"Number of characters in the string: \"+ count);\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Java program to find the number of characters in the given string.\n\n### Input:\n\"Hello World\"\n\n### Response:\npublic class CharacterCount {\n    public static int findCharCount(String str) {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) != ' ')\n                count++;\n        }\n        return count;\n    }\n\n    public static void main(String args[]) {\n        String str = \"Hello World\";\n        int count  = findCharCount(str);\n        System.out.print(\"Number of characters in the string: \"+ count);\n    }\n}"},{"instruction":"Generate a regular expression pattern to match an email address.","input":"","output":"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a regular expression pattern to match an email address.\n\n### Input:\n\n\n### Response:\n^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"},{"instruction":"Write a Java program to compare two given dates as strings and determine which one comes before the other.","input":"Date 1: \"10\/05\/2021\"\nDate 2: \"09\/05\/2021\"","output":"public static int compareDates(String str1, String str2) { \n\tSimpleDateFormat formatter = new SimpleDateFormat(\"dd\/MM\/yyyy\"); \n\n\tDate date1 = formatter.parse(str1); \n\tDate date2 = formatter.parse(str2); \n\n\tif (date1.compareTo(date2) > 0) \n\t\treturn 1; \n\t\n\tif (date1.compareTo(date2) < 0) \n\t\treturn -1; \n\t\n\treturn 0;\n} \n\n\/\/ Main driver program\npublic static void main(String[] args) \n{ \n\tString str1 = \"10\/05\/2021\"; \n\tString str2 = \"09\/05\/2021\"; \n\n\tSystem.out.println(compareDates(str1, str2));\n}\n\n\/\/ Output: 1  (date1 > date2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Java program to compare two given dates as strings and determine which one comes before the other.\n\n### Input:\nDate 1: \"10\/05\/2021\"\nDate 2: \"09\/05\/2021\"\n\n### Response:\npublic static int compareDates(String str1, String str2) { \n\tSimpleDateFormat formatter = new SimpleDateFormat(\"dd\/MM\/yyyy\"); \n\n\tDate date1 = formatter.parse(str1); \n\tDate date2 = formatter.parse(str2); \n\n\tif (date1.compareTo(date2) > 0) \n\t\treturn 1; \n\t\n\tif (date1.compareTo(date2) < 0) \n\t\treturn -1; \n\t\n\treturn 0;\n} \n\n\/\/ Main driver program\npublic static void main(String[] args) \n{ \n\tString str1 = \"10\/05\/2021\"; \n\tString str2 = \"09\/05\/2021\"; \n\n\tSystem.out.println(compareDates(str1, str2));\n}\n\n\/\/ Output: 1  (date1 > date2)"},{"instruction":"Create a class for a Student object that stores the student's name and age.","input":"","output":"class Student(object):\n \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for a Student object that stores the student's name and age.\n\n### Input:\n\n\n### Response:\nclass Student(object):\n \n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def get_name(self):\n        return self.name\n    \n    def get_age(self):\n        return self.age"},{"instruction":"Write a function in C++ that takes in a list of strings and returns a set containing the longest string in the list.","input":"[\"abc\", \"def\", \"xyz\", \"lmnop\"]","output":"#include <iostream>\n#include <string>\n#include <set>\n\nstd::set<std::string> getLongestString(std::vector<std::string> str_list)\n{\n    int len = 0;\n    std::string longest;\n    std::set<std::string> longest_strs;\n    for(auto s : str_list)\n    {\n        if(s.length() > len)\n        {\n            longest = s;\n            len = s.length();\n        }\n    }\n    longest_strs.insert(longest);\n    return longest_strs;\n}\n\nint main()\n{\n    std::vector<std::string> str_list = {\"abc\", \"def\", \"xyz\", \"lmnop\"};\n    std::set<std::string> longest_strs;\n    longest_strs = getLongestString(str_list);\n    for(auto s : longest_strs)\n    {\n        std::cout << s << std::endl;\n    }\n    return 0;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in C++ that takes in a list of strings and returns a set containing the longest string in the list.\n\n### Input:\n[\"abc\", \"def\", \"xyz\", \"lmnop\"]\n\n### Response:\n#include <iostream>\n#include <string>\n#include <set>\n\nstd::set<std::string> getLongestString(std::vector<std::string> str_list)\n{\n    int len = 0;\n    std::string longest;\n    std::set<std::string> longest_strs;\n    for(auto s : str_list)\n    {\n        if(s.length() > len)\n        {\n            longest = s;\n            len = s.length();\n        }\n    }\n    longest_strs.insert(longest);\n    return longest_strs;\n}\n\nint main()\n{\n    std::vector<std::string> str_list = {\"abc\", \"def\", \"xyz\", \"lmnop\"};\n    std::set<std::string> longest_strs;\n    longest_strs = getLongestString(str_list);\n    for(auto s : longest_strs)\n    {\n        std::cout << s << std::endl;\n    }\n    return 0;\n}"},{"instruction":"Develop a program that adds two matrices","input":"matrix1 = [[1,2], [3,4]]\nmatrix2 = [[4,3], [2,1]]","output":"def add_matrix(matrix1, matrix2):\nresult = []\n    for i in range(len(matrix1)):\n        result_row = []\n        for j in range(len(matrix1[i])):\n            result_row.append(matrix1[i][j] + matrix2[i][j])\n        result.append(result_row)\n    return result","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program that adds two matrices\n\n### Input:\nmatrix1 = [[1,2], [3,4]]\nmatrix2 = [[4,3], [2,1]]\n\n### Response:\ndef add_matrix(matrix1, matrix2):\nresult = []\n    for i in range(len(matrix1)):\n        result_row = []\n        for j in range(len(matrix1[i])):\n            result_row.append(matrix1[i][j] + matrix2[i][j])\n        result.append(result_row)\n    return result"},{"instruction":"Design a program that prints the pyramid pattern of a given number.","input":"number = 5","output":"def print_pyramid(number):\n    \"\"\"Print the pyramid pattern of a given number.\"\"\"\n    # height of the pyramid = number\n    for row in range(number):\n        # number of spaces in every row = number - row - 1\n        for s in range(number - row - 1):\n            print(' ', end='')  # print space\n        # number of stars in every row = row + 1\n        for star in range(row + 1):\n            print('*', end='')  # print star\n        print()  # newline\n\n        \nnumber = 5\nprint_pyramid(number)\n\n#    *\n#   **\n#  ***\n# ****\n#*****","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that prints the pyramid pattern of a given number.\n\n### Input:\nnumber = 5\n\n### Response:\ndef print_pyramid(number):\n    \"\"\"Print the pyramid pattern of a given number.\"\"\"\n    # height of the pyramid = number\n    for row in range(number):\n        # number of spaces in every row = number - row - 1\n        for s in range(number - row - 1):\n            print(' ', end='')  # print space\n        # number of stars in every row = row + 1\n        for star in range(row + 1):\n            print('*', end='')  # print star\n        print()  # newline\n\n        \nnumber = 5\nprint_pyramid(number)\n\n#    *\n#   **\n#  ***\n# ****\n#*****"},{"instruction":"Build a code to check the validity of an arithmetic equation.","input":"Equation: 20 - 7 + 5","output":"def check_validity(equation):\n    equation = equation.replace(\" \", \"\")\n    operators = ['+', '-', '*', '\/']\n    if any(op in equation for op in operators):\n        return eval(equation)\n    else:\n        return False","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a code to check the validity of an arithmetic equation.\n\n### Input:\nEquation: 20 - 7 + 5\n\n### Response:\ndef check_validity(equation):\n    equation = equation.replace(\" \", \"\")\n    operators = ['+', '-', '*', '\/']\n    if any(op in equation for op in operators):\n        return eval(equation)\n    else:\n        return False"},{"instruction":"Generate an Apache Spark program to calculate the average age of customers in a given dataset.","input":"Dataset: customer_data","output":"from pyspark.sql import SparkSession\n\n# Create the Spark session\nspark = SparkSession\\\n .builder\\\n .appName(\"Average Age Calculation\")\\\n .getOrCreate()\n\n# Load the input data\ncustomer_data = spark.read.csv(\"customer_data\",header=True)\n\n# Calculate average age\naverage_age = customer_data.selectExpr(\"Avg(age) as average_age\")\n\n# Show results\naverage_age.show()\n\n# Stop the Spark session\nspark.stop()","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an Apache Spark program to calculate the average age of customers in a given dataset.\n\n### Input:\nDataset: customer_data\n\n### Response:\nfrom pyspark.sql import SparkSession\n\n# Create the Spark session\nspark = SparkSession\\\n .builder\\\n .appName(\"Average Age Calculation\")\\\n .getOrCreate()\n\n# Load the input data\ncustomer_data = spark.read.csv(\"customer_data\",header=True)\n\n# Calculate average age\naverage_age = customer_data.selectExpr(\"Avg(age) as average_age\")\n\n# Show results\naverage_age.show()\n\n# Stop the Spark session\nspark.stop()"},{"instruction":"Create a Python program to generate the nth number in the Fibonacci series.","input":"","output":"def nth_fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return nth_fibonacci(n-1) + nth_fibonacci(n-2)","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate the nth number in the Fibonacci series.\n\n### Input:\n\n\n### Response:\ndef nth_fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return nth_fibonacci(n-1) + nth_fibonacci(n-2)"},{"instruction":"Write a SQL query to retrieve the number of books added in the past week.","input":"","output":"SELECT COUNT(*)\nFROM books\nWHERE date_added >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a SQL query to retrieve the number of books added in the past week.\n\n### Input:\n\n\n### Response:\nSELECT COUNT(*)\nFROM books\nWHERE date_added >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK);"},{"instruction":"Write a Java program to clone an array of strings.","input":"[\u201cFirst\u201d, \u201cSecond\u201d, \u201cThird\u201d]","output":"public class CloneStringArray {\n  \n    public static void main(String[] args) {\n        String[] array = { \u201cFirst\u201d, \u201cSecond\u201d, \u201cThird\u201d };\n        String[] clonedArray = array.clone();\n  \n        System.out.println(\"Array: \" + Arrays.toString(array));\n        System.out.println(\"Cloned array: \" + Arrays.toString(clonedArray));\n    }\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Java program to clone an array of strings.\n\n### Input:\n[\u201cFirst\u201d, \u201cSecond\u201d, \u201cThird\u201d]\n\n### Response:\npublic class CloneStringArray {\n  \n    public static void main(String[] args) {\n        String[] array = { \u201cFirst\u201d, \u201cSecond\u201d, \u201cThird\u201d };\n        String[] clonedArray = array.clone();\n  \n        System.out.println(\"Array: \" + Arrays.toString(array));\n        System.out.println(\"Cloned array: \" + Arrays.toString(clonedArray));\n    }\n}"},{"instruction":"Create a Swift program to sort a dictionary by value using a closure.","input":"let dict = [\"dog\": 7, \"cat\": 2, \"bird\": 4]","output":"let sortedDict = dict.sorted { $0.value < $1.value }\nprint(sortedDict) \/\/ [\"cat\": 2, \"bird\": 4, \"dog\": 7]","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Swift program to sort a dictionary by value using a closure.\n\n### Input:\nlet dict = [\"dog\": 7, \"cat\": 2, \"bird\": 4]\n\n### Response:\nlet sortedDict = dict.sorted { $0.value < $1.value }\nprint(sortedDict) \/\/ [\"cat\": 2, \"bird\": 4, \"dog\": 7]"},{"instruction":"Develop a program to calculate the square root of a number using the Babylonian method.","input":"","output":"def sqrt(number):\n    guess = number \/ 2.0\n    accuracy = 0.0000001\n    while abs(number-guess**2) >= accuracy: \n        guess = (guess + number\/guess) \/ 2.0\n    return guess\n\nprint(sqrt(25))\n# Output: 5.0","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to calculate the square root of a number using the Babylonian method.\n\n### Input:\n\n\n### Response:\ndef sqrt(number):\n    guess = number \/ 2.0\n    accuracy = 0.0000001\n    while abs(number-guess**2) >= accuracy: \n        guess = (guess + number\/guess) \/ 2.0\n    return guess\n\nprint(sqrt(25))\n# Output: 5.0"},{"instruction":"Generate a snippet code that deletes a user from an application's database.","input":"Table name: users\nPrimary key: user_id","output":"DELETE FROM users WHERE user_id = ?;","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a snippet code that deletes a user from an application's database.\n\n### Input:\nTable name: users\nPrimary key: user_id\n\n### Response:\nDELETE FROM users WHERE user_id = ?;"},{"instruction":"Convert the following JavaScript code to a function that takes an array as input and returns an array of the squares and cubes of each element.","input":"","output":"function squaresCubes(arr) {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] ** 2);\n    result.push(arr[i] ** 3);\n  }\n  return result;\n}","prompt":"Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following JavaScript code to a function that takes an array as input and returns an array of the squares and cubes of each element.\n\n### Input:\n\n\n### Response:\nfunction squaresCubes(arr) {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i] ** 2);\n    result.push(arr[i] ** 3);\n  }\n  return result;\n}"}]